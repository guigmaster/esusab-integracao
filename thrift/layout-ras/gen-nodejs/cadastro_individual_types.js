//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
CondicoesDeSaudeThrift = module.exports.CondicoesDeSaudeThrift = function(args) {
  this.descricaoCausaInternacaoEm12Meses = null;
  this.descricaoOutraCondicao1 = null;
  this.descricaoOutraCondicao2 = null;
  this.descricaoOutraCondicao3 = null;
  this.descricaoPlantasMedicinaisUsadas = null;
  this.doencaCardiaca = null;
  this.doencaRespiratoria = null;
  this.doencaRins = null;
  this.maternidadeDeReferencia = null;
  this.situacaoPeso = null;
  this.statusEhDependenteAlcool = null;
  this.statusEhDependenteOutrasDrogas = null;
  this.statusEhFumante = null;
  this.statusEhGestante = null;
  this.statusEstaAcamado = null;
  this.statusEstaDomiciliado = null;
  this.statusTemDiabetes = null;
  this.statusTemDoencaRespiratoria = null;
  this.statusTemHanseniase = null;
  this.statusTemHipertensaoArterial = null;
  this.statusTemTeveCancer = null;
  this.statusTemTeveDoencasRins = null;
  this.statusTemTuberculose = null;
  this.statusTeveAvcDerrame = null;
  this.statusTeveDoencaCardiaca = null;
  this.statusTeveInfarto = null;
  this.statusTeveInternadoEm12Meses = null;
  this.statusUsaOutrasPraticasIntegrativasOuComplementares = null;
  this.statusUsaPlantaMedicinais = null;
  this.statusDiagnosticoMental = null;
  if (args) {
    if (args.descricaoCausaInternacaoEm12Meses !== undefined) {
      this.descricaoCausaInternacaoEm12Meses = args.descricaoCausaInternacaoEm12Meses;
    }
    if (args.descricaoOutraCondicao1 !== undefined) {
      this.descricaoOutraCondicao1 = args.descricaoOutraCondicao1;
    }
    if (args.descricaoOutraCondicao2 !== undefined) {
      this.descricaoOutraCondicao2 = args.descricaoOutraCondicao2;
    }
    if (args.descricaoOutraCondicao3 !== undefined) {
      this.descricaoOutraCondicao3 = args.descricaoOutraCondicao3;
    }
    if (args.descricaoPlantasMedicinaisUsadas !== undefined) {
      this.descricaoPlantasMedicinaisUsadas = args.descricaoPlantasMedicinaisUsadas;
    }
    if (args.doencaCardiaca !== undefined) {
      this.doencaCardiaca = args.doencaCardiaca;
    }
    if (args.doencaRespiratoria !== undefined) {
      this.doencaRespiratoria = args.doencaRespiratoria;
    }
    if (args.doencaRins !== undefined) {
      this.doencaRins = args.doencaRins;
    }
    if (args.maternidadeDeReferencia !== undefined) {
      this.maternidadeDeReferencia = args.maternidadeDeReferencia;
    }
    if (args.situacaoPeso !== undefined) {
      this.situacaoPeso = args.situacaoPeso;
    }
    if (args.statusEhDependenteAlcool !== undefined) {
      this.statusEhDependenteAlcool = args.statusEhDependenteAlcool;
    }
    if (args.statusEhDependenteOutrasDrogas !== undefined) {
      this.statusEhDependenteOutrasDrogas = args.statusEhDependenteOutrasDrogas;
    }
    if (args.statusEhFumante !== undefined) {
      this.statusEhFumante = args.statusEhFumante;
    }
    if (args.statusEhGestante !== undefined) {
      this.statusEhGestante = args.statusEhGestante;
    }
    if (args.statusEstaAcamado !== undefined) {
      this.statusEstaAcamado = args.statusEstaAcamado;
    }
    if (args.statusEstaDomiciliado !== undefined) {
      this.statusEstaDomiciliado = args.statusEstaDomiciliado;
    }
    if (args.statusTemDiabetes !== undefined) {
      this.statusTemDiabetes = args.statusTemDiabetes;
    }
    if (args.statusTemDoencaRespiratoria !== undefined) {
      this.statusTemDoencaRespiratoria = args.statusTemDoencaRespiratoria;
    }
    if (args.statusTemHanseniase !== undefined) {
      this.statusTemHanseniase = args.statusTemHanseniase;
    }
    if (args.statusTemHipertensaoArterial !== undefined) {
      this.statusTemHipertensaoArterial = args.statusTemHipertensaoArterial;
    }
    if (args.statusTemTeveCancer !== undefined) {
      this.statusTemTeveCancer = args.statusTemTeveCancer;
    }
    if (args.statusTemTeveDoencasRins !== undefined) {
      this.statusTemTeveDoencasRins = args.statusTemTeveDoencasRins;
    }
    if (args.statusTemTuberculose !== undefined) {
      this.statusTemTuberculose = args.statusTemTuberculose;
    }
    if (args.statusTeveAvcDerrame !== undefined) {
      this.statusTeveAvcDerrame = args.statusTeveAvcDerrame;
    }
    if (args.statusTeveDoencaCardiaca !== undefined) {
      this.statusTeveDoencaCardiaca = args.statusTeveDoencaCardiaca;
    }
    if (args.statusTeveInfarto !== undefined) {
      this.statusTeveInfarto = args.statusTeveInfarto;
    }
    if (args.statusTeveInternadoEm12Meses !== undefined) {
      this.statusTeveInternadoEm12Meses = args.statusTeveInternadoEm12Meses;
    }
    if (args.statusUsaOutrasPraticasIntegrativasOuComplementares !== undefined) {
      this.statusUsaOutrasPraticasIntegrativasOuComplementares = args.statusUsaOutrasPraticasIntegrativasOuComplementares;
    }
    if (args.statusUsaPlantaMedicinais !== undefined) {
      this.statusUsaPlantaMedicinais = args.statusUsaPlantaMedicinais;
    }
    if (args.statusDiagnosticoMental !== undefined) {
      this.statusDiagnosticoMental = args.statusDiagnosticoMental;
    }
  }
};
CondicoesDeSaudeThrift.prototype = {};
CondicoesDeSaudeThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.descricaoCausaInternacaoEm12Meses = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descricaoOutraCondicao1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descricaoOutraCondicao2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.descricaoOutraCondicao3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descricaoPlantasMedicinaisUsadas = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.doencaCardiaca = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64();
          this.doencaCardiaca.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.doencaRespiratoria = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI64();
          this.doencaRespiratoria.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.doencaRins = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI64();
          this.doencaRins.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.maternidadeDeReferencia = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.situacaoPeso = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEhDependenteAlcool = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEhDependenteOutrasDrogas = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEhFumante = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEhGestante = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEstaAcamado = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEstaDomiciliado = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemDiabetes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemDoencaRespiratoria = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemHanseniase = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemHipertensaoArterial = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemTeveCancer = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemTeveDoencasRins = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemTuberculose = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTeveAvcDerrame = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTeveDoencaCardiaca = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTeveInfarto = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTeveInternadoEm12Meses = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.statusUsaOutrasPraticasIntegrativasOuComplementares = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.BOOL) {
        this.statusUsaPlantaMedicinais = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.statusDiagnosticoMental = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CondicoesDeSaudeThrift.prototype.write = function(output) {
  output.writeStructBegin('CondicoesDeSaudeThrift');
  if (this.descricaoCausaInternacaoEm12Meses !== null && this.descricaoCausaInternacaoEm12Meses !== undefined) {
    output.writeFieldBegin('descricaoCausaInternacaoEm12Meses', Thrift.Type.STRING, 1);
    output.writeString(this.descricaoCausaInternacaoEm12Meses);
    output.writeFieldEnd();
  }
  if (this.descricaoOutraCondicao1 !== null && this.descricaoOutraCondicao1 !== undefined) {
    output.writeFieldBegin('descricaoOutraCondicao1', Thrift.Type.STRING, 2);
    output.writeString(this.descricaoOutraCondicao1);
    output.writeFieldEnd();
  }
  if (this.descricaoOutraCondicao2 !== null && this.descricaoOutraCondicao2 !== undefined) {
    output.writeFieldBegin('descricaoOutraCondicao2', Thrift.Type.STRING, 3);
    output.writeString(this.descricaoOutraCondicao2);
    output.writeFieldEnd();
  }
  if (this.descricaoOutraCondicao3 !== null && this.descricaoOutraCondicao3 !== undefined) {
    output.writeFieldBegin('descricaoOutraCondicao3', Thrift.Type.STRING, 4);
    output.writeString(this.descricaoOutraCondicao3);
    output.writeFieldEnd();
  }
  if (this.descricaoPlantasMedicinaisUsadas !== null && this.descricaoPlantasMedicinaisUsadas !== undefined) {
    output.writeFieldBegin('descricaoPlantasMedicinaisUsadas', Thrift.Type.STRING, 5);
    output.writeString(this.descricaoPlantasMedicinaisUsadas);
    output.writeFieldEnd();
  }
  if (this.doencaCardiaca !== null && this.doencaCardiaca !== undefined) {
    output.writeFieldBegin('doencaCardiaca', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.doencaCardiaca.length);
    for (var iter21 in this.doencaCardiaca)
    {
      if (this.doencaCardiaca.hasOwnProperty(iter21))
      {
        iter21 = this.doencaCardiaca[iter21];
        output.writeI64(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doencaRespiratoria !== null && this.doencaRespiratoria !== undefined) {
    output.writeFieldBegin('doencaRespiratoria', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I64, this.doencaRespiratoria.length);
    for (var iter22 in this.doencaRespiratoria)
    {
      if (this.doencaRespiratoria.hasOwnProperty(iter22))
      {
        iter22 = this.doencaRespiratoria[iter22];
        output.writeI64(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doencaRins !== null && this.doencaRins !== undefined) {
    output.writeFieldBegin('doencaRins', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I64, this.doencaRins.length);
    for (var iter23 in this.doencaRins)
    {
      if (this.doencaRins.hasOwnProperty(iter23))
      {
        iter23 = this.doencaRins[iter23];
        output.writeI64(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.maternidadeDeReferencia !== null && this.maternidadeDeReferencia !== undefined) {
    output.writeFieldBegin('maternidadeDeReferencia', Thrift.Type.STRING, 9);
    output.writeString(this.maternidadeDeReferencia);
    output.writeFieldEnd();
  }
  if (this.situacaoPeso !== null && this.situacaoPeso !== undefined) {
    output.writeFieldBegin('situacaoPeso', Thrift.Type.I64, 10);
    output.writeI64(this.situacaoPeso);
    output.writeFieldEnd();
  }
  if (this.statusEhDependenteAlcool !== null && this.statusEhDependenteAlcool !== undefined) {
    output.writeFieldBegin('statusEhDependenteAlcool', Thrift.Type.BOOL, 11);
    output.writeBool(this.statusEhDependenteAlcool);
    output.writeFieldEnd();
  }
  if (this.statusEhDependenteOutrasDrogas !== null && this.statusEhDependenteOutrasDrogas !== undefined) {
    output.writeFieldBegin('statusEhDependenteOutrasDrogas', Thrift.Type.BOOL, 12);
    output.writeBool(this.statusEhDependenteOutrasDrogas);
    output.writeFieldEnd();
  }
  if (this.statusEhFumante !== null && this.statusEhFumante !== undefined) {
    output.writeFieldBegin('statusEhFumante', Thrift.Type.BOOL, 13);
    output.writeBool(this.statusEhFumante);
    output.writeFieldEnd();
  }
  if (this.statusEhGestante !== null && this.statusEhGestante !== undefined) {
    output.writeFieldBegin('statusEhGestante', Thrift.Type.BOOL, 14);
    output.writeBool(this.statusEhGestante);
    output.writeFieldEnd();
  }
  if (this.statusEstaAcamado !== null && this.statusEstaAcamado !== undefined) {
    output.writeFieldBegin('statusEstaAcamado', Thrift.Type.BOOL, 15);
    output.writeBool(this.statusEstaAcamado);
    output.writeFieldEnd();
  }
  if (this.statusEstaDomiciliado !== null && this.statusEstaDomiciliado !== undefined) {
    output.writeFieldBegin('statusEstaDomiciliado', Thrift.Type.BOOL, 16);
    output.writeBool(this.statusEstaDomiciliado);
    output.writeFieldEnd();
  }
  if (this.statusTemDiabetes !== null && this.statusTemDiabetes !== undefined) {
    output.writeFieldBegin('statusTemDiabetes', Thrift.Type.BOOL, 17);
    output.writeBool(this.statusTemDiabetes);
    output.writeFieldEnd();
  }
  if (this.statusTemDoencaRespiratoria !== null && this.statusTemDoencaRespiratoria !== undefined) {
    output.writeFieldBegin('statusTemDoencaRespiratoria', Thrift.Type.BOOL, 18);
    output.writeBool(this.statusTemDoencaRespiratoria);
    output.writeFieldEnd();
  }
  if (this.statusTemHanseniase !== null && this.statusTemHanseniase !== undefined) {
    output.writeFieldBegin('statusTemHanseniase', Thrift.Type.BOOL, 19);
    output.writeBool(this.statusTemHanseniase);
    output.writeFieldEnd();
  }
  if (this.statusTemHipertensaoArterial !== null && this.statusTemHipertensaoArterial !== undefined) {
    output.writeFieldBegin('statusTemHipertensaoArterial', Thrift.Type.BOOL, 20);
    output.writeBool(this.statusTemHipertensaoArterial);
    output.writeFieldEnd();
  }
  if (this.statusTemTeveCancer !== null && this.statusTemTeveCancer !== undefined) {
    output.writeFieldBegin('statusTemTeveCancer', Thrift.Type.BOOL, 21);
    output.writeBool(this.statusTemTeveCancer);
    output.writeFieldEnd();
  }
  if (this.statusTemTeveDoencasRins !== null && this.statusTemTeveDoencasRins !== undefined) {
    output.writeFieldBegin('statusTemTeveDoencasRins', Thrift.Type.BOOL, 22);
    output.writeBool(this.statusTemTeveDoencasRins);
    output.writeFieldEnd();
  }
  if (this.statusTemTuberculose !== null && this.statusTemTuberculose !== undefined) {
    output.writeFieldBegin('statusTemTuberculose', Thrift.Type.BOOL, 23);
    output.writeBool(this.statusTemTuberculose);
    output.writeFieldEnd();
  }
  if (this.statusTeveAvcDerrame !== null && this.statusTeveAvcDerrame !== undefined) {
    output.writeFieldBegin('statusTeveAvcDerrame', Thrift.Type.BOOL, 24);
    output.writeBool(this.statusTeveAvcDerrame);
    output.writeFieldEnd();
  }
  if (this.statusTeveDoencaCardiaca !== null && this.statusTeveDoencaCardiaca !== undefined) {
    output.writeFieldBegin('statusTeveDoencaCardiaca', Thrift.Type.BOOL, 25);
    output.writeBool(this.statusTeveDoencaCardiaca);
    output.writeFieldEnd();
  }
  if (this.statusTeveInfarto !== null && this.statusTeveInfarto !== undefined) {
    output.writeFieldBegin('statusTeveInfarto', Thrift.Type.BOOL, 26);
    output.writeBool(this.statusTeveInfarto);
    output.writeFieldEnd();
  }
  if (this.statusTeveInternadoEm12Meses !== null && this.statusTeveInternadoEm12Meses !== undefined) {
    output.writeFieldBegin('statusTeveInternadoEm12Meses', Thrift.Type.BOOL, 27);
    output.writeBool(this.statusTeveInternadoEm12Meses);
    output.writeFieldEnd();
  }
  if (this.statusUsaOutrasPraticasIntegrativasOuComplementares !== null && this.statusUsaOutrasPraticasIntegrativasOuComplementares !== undefined) {
    output.writeFieldBegin('statusUsaOutrasPraticasIntegrativasOuComplementares', Thrift.Type.BOOL, 29);
    output.writeBool(this.statusUsaOutrasPraticasIntegrativasOuComplementares);
    output.writeFieldEnd();
  }
  if (this.statusUsaPlantaMedicinais !== null && this.statusUsaPlantaMedicinais !== undefined) {
    output.writeFieldBegin('statusUsaPlantaMedicinais', Thrift.Type.BOOL, 30);
    output.writeBool(this.statusUsaPlantaMedicinais);
    output.writeFieldEnd();
  }
  if (this.statusDiagnosticoMental !== null && this.statusDiagnosticoMental !== undefined) {
    output.writeFieldBegin('statusDiagnosticoMental', Thrift.Type.BOOL, 31);
    output.writeBool(this.statusDiagnosticoMental);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmSituacaoDeRuaThrift = module.exports.EmSituacaoDeRuaThrift = function(args) {
  this.grauParentescoFamiliarFrequentado = null;
  this.higienePessoalSituacaoRua = null;
  this.origemAlimentoSituacaoRua = null;
  this.outraInstituicaoQueAcompanha = null;
  this.quantidadeAlimentacoesAoDiaSituacaoRua = null;
  this.statusAcompanhadoPorOutraInstituicao = null;
  this.statusPossuiReferenciaFamiliar = null;
  this.statusRecebeBeneficio = null;
  this.statusSituacaoRua = null;
  this.statusTemAcessoHigienePessoalSituacaoRua = null;
  this.statusVisitaFamiliarFrequentemente = null;
  this.tempoSituacaoRua = null;
  if (args) {
    if (args.grauParentescoFamiliarFrequentado !== undefined) {
      this.grauParentescoFamiliarFrequentado = args.grauParentescoFamiliarFrequentado;
    }
    if (args.higienePessoalSituacaoRua !== undefined) {
      this.higienePessoalSituacaoRua = args.higienePessoalSituacaoRua;
    }
    if (args.origemAlimentoSituacaoRua !== undefined) {
      this.origemAlimentoSituacaoRua = args.origemAlimentoSituacaoRua;
    }
    if (args.outraInstituicaoQueAcompanha !== undefined) {
      this.outraInstituicaoQueAcompanha = args.outraInstituicaoQueAcompanha;
    }
    if (args.quantidadeAlimentacoesAoDiaSituacaoRua !== undefined) {
      this.quantidadeAlimentacoesAoDiaSituacaoRua = args.quantidadeAlimentacoesAoDiaSituacaoRua;
    }
    if (args.statusAcompanhadoPorOutraInstituicao !== undefined) {
      this.statusAcompanhadoPorOutraInstituicao = args.statusAcompanhadoPorOutraInstituicao;
    }
    if (args.statusPossuiReferenciaFamiliar !== undefined) {
      this.statusPossuiReferenciaFamiliar = args.statusPossuiReferenciaFamiliar;
    }
    if (args.statusRecebeBeneficio !== undefined) {
      this.statusRecebeBeneficio = args.statusRecebeBeneficio;
    }
    if (args.statusSituacaoRua !== undefined) {
      this.statusSituacaoRua = args.statusSituacaoRua;
    }
    if (args.statusTemAcessoHigienePessoalSituacaoRua !== undefined) {
      this.statusTemAcessoHigienePessoalSituacaoRua = args.statusTemAcessoHigienePessoalSituacaoRua;
    }
    if (args.statusVisitaFamiliarFrequentemente !== undefined) {
      this.statusVisitaFamiliarFrequentemente = args.statusVisitaFamiliarFrequentemente;
    }
    if (args.tempoSituacaoRua !== undefined) {
      this.tempoSituacaoRua = args.tempoSituacaoRua;
    }
  }
};
EmSituacaoDeRuaThrift.prototype = {};
EmSituacaoDeRuaThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.grauParentescoFamiliarFrequentado = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.higienePessoalSituacaoRua = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI64();
          this.higienePessoalSituacaoRua.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.origemAlimentoSituacaoRua = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = input.readI64();
          this.origemAlimentoSituacaoRua.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outraInstituicaoQueAcompanha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.quantidadeAlimentacoesAoDiaSituacaoRua = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.statusAcompanhadoPorOutraInstituicao = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.statusPossuiReferenciaFamiliar = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.statusRecebeBeneficio = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.statusSituacaoRua = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemAcessoHigienePessoalSituacaoRua = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.statusVisitaFamiliarFrequentemente = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.tempoSituacaoRua = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmSituacaoDeRuaThrift.prototype.write = function(output) {
  output.writeStructBegin('EmSituacaoDeRuaThrift');
  if (this.grauParentescoFamiliarFrequentado !== null && this.grauParentescoFamiliarFrequentado !== undefined) {
    output.writeFieldBegin('grauParentescoFamiliarFrequentado', Thrift.Type.STRING, 1);
    output.writeString(this.grauParentescoFamiliarFrequentado);
    output.writeFieldEnd();
  }
  if (this.higienePessoalSituacaoRua !== null && this.higienePessoalSituacaoRua !== undefined) {
    output.writeFieldBegin('higienePessoalSituacaoRua', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.higienePessoalSituacaoRua.length);
    for (var iter38 in this.higienePessoalSituacaoRua)
    {
      if (this.higienePessoalSituacaoRua.hasOwnProperty(iter38))
      {
        iter38 = this.higienePessoalSituacaoRua[iter38];
        output.writeI64(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.origemAlimentoSituacaoRua !== null && this.origemAlimentoSituacaoRua !== undefined) {
    output.writeFieldBegin('origemAlimentoSituacaoRua', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.origemAlimentoSituacaoRua.length);
    for (var iter39 in this.origemAlimentoSituacaoRua)
    {
      if (this.origemAlimentoSituacaoRua.hasOwnProperty(iter39))
      {
        iter39 = this.origemAlimentoSituacaoRua[iter39];
        output.writeI64(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outraInstituicaoQueAcompanha !== null && this.outraInstituicaoQueAcompanha !== undefined) {
    output.writeFieldBegin('outraInstituicaoQueAcompanha', Thrift.Type.STRING, 4);
    output.writeString(this.outraInstituicaoQueAcompanha);
    output.writeFieldEnd();
  }
  if (this.quantidadeAlimentacoesAoDiaSituacaoRua !== null && this.quantidadeAlimentacoesAoDiaSituacaoRua !== undefined) {
    output.writeFieldBegin('quantidadeAlimentacoesAoDiaSituacaoRua', Thrift.Type.I64, 5);
    output.writeI64(this.quantidadeAlimentacoesAoDiaSituacaoRua);
    output.writeFieldEnd();
  }
  if (this.statusAcompanhadoPorOutraInstituicao !== null && this.statusAcompanhadoPorOutraInstituicao !== undefined) {
    output.writeFieldBegin('statusAcompanhadoPorOutraInstituicao', Thrift.Type.BOOL, 6);
    output.writeBool(this.statusAcompanhadoPorOutraInstituicao);
    output.writeFieldEnd();
  }
  if (this.statusPossuiReferenciaFamiliar !== null && this.statusPossuiReferenciaFamiliar !== undefined) {
    output.writeFieldBegin('statusPossuiReferenciaFamiliar', Thrift.Type.BOOL, 7);
    output.writeBool(this.statusPossuiReferenciaFamiliar);
    output.writeFieldEnd();
  }
  if (this.statusRecebeBeneficio !== null && this.statusRecebeBeneficio !== undefined) {
    output.writeFieldBegin('statusRecebeBeneficio', Thrift.Type.BOOL, 8);
    output.writeBool(this.statusRecebeBeneficio);
    output.writeFieldEnd();
  }
  if (this.statusSituacaoRua !== null && this.statusSituacaoRua !== undefined) {
    output.writeFieldBegin('statusSituacaoRua', Thrift.Type.BOOL, 9);
    output.writeBool(this.statusSituacaoRua);
    output.writeFieldEnd();
  }
  if (this.statusTemAcessoHigienePessoalSituacaoRua !== null && this.statusTemAcessoHigienePessoalSituacaoRua !== undefined) {
    output.writeFieldBegin('statusTemAcessoHigienePessoalSituacaoRua', Thrift.Type.BOOL, 10);
    output.writeBool(this.statusTemAcessoHigienePessoalSituacaoRua);
    output.writeFieldEnd();
  }
  if (this.statusVisitaFamiliarFrequentemente !== null && this.statusVisitaFamiliarFrequentemente !== undefined) {
    output.writeFieldBegin('statusVisitaFamiliarFrequentemente', Thrift.Type.BOOL, 11);
    output.writeBool(this.statusVisitaFamiliarFrequentemente);
    output.writeFieldEnd();
  }
  if (this.tempoSituacaoRua !== null && this.tempoSituacaoRua !== undefined) {
    output.writeFieldBegin('tempoSituacaoRua', Thrift.Type.I64, 12);
    output.writeI64(this.tempoSituacaoRua);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IdentificacaoUsuarioCidadaoThrift = module.exports.IdentificacaoUsuarioCidadaoThrift = function(args) {
  this.nomeSocial = null;
  this.codigoIbgeMunicipioNascimento = null;
  this.dataNascimentoCidadao = null;
  this.desconheceNomeMae = null;
  this.emailCidadao = null;
  this.nacionalidadeCidadao = null;
  this.nomeCidadao = null;
  this.nomeMaeCidadao = null;
  this.cnsCidadao = null;
  this.cnsResponsavelFamiliar = null;
  this.telefoneCelular = null;
  this.numeroNisPisPasep = null;
  this.paisNascimento = null;
  this.racaCorCidadao = null;
  this.sexoCidadao = null;
  this.statusEhResponsavel = null;
  this.etnia = null;
  this.nomePaiCidadao = null;
  this.desconheceNomePai = null;
  this.dtNaturalizacao = null;
  this.portariaNaturalizacao = null;
  this.dtEntradaBrasil = null;
  this.microArea = null;
  this.stForaArea = null;
  this.cpfCidadao = null;
  this.cpfResponsavelFamiliar = null;
  if (args) {
    if (args.nomeSocial !== undefined) {
      this.nomeSocial = args.nomeSocial;
    }
    if (args.codigoIbgeMunicipioNascimento !== undefined) {
      this.codigoIbgeMunicipioNascimento = args.codigoIbgeMunicipioNascimento;
    }
    if (args.dataNascimentoCidadao !== undefined) {
      this.dataNascimentoCidadao = args.dataNascimentoCidadao;
    }
    if (args.desconheceNomeMae !== undefined) {
      this.desconheceNomeMae = args.desconheceNomeMae;
    }
    if (args.emailCidadao !== undefined) {
      this.emailCidadao = args.emailCidadao;
    }
    if (args.nacionalidadeCidadao !== undefined) {
      this.nacionalidadeCidadao = args.nacionalidadeCidadao;
    }
    if (args.nomeCidadao !== undefined) {
      this.nomeCidadao = args.nomeCidadao;
    }
    if (args.nomeMaeCidadao !== undefined) {
      this.nomeMaeCidadao = args.nomeMaeCidadao;
    }
    if (args.cnsCidadao !== undefined) {
      this.cnsCidadao = args.cnsCidadao;
    }
    if (args.cnsResponsavelFamiliar !== undefined) {
      this.cnsResponsavelFamiliar = args.cnsResponsavelFamiliar;
    }
    if (args.telefoneCelular !== undefined) {
      this.telefoneCelular = args.telefoneCelular;
    }
    if (args.numeroNisPisPasep !== undefined) {
      this.numeroNisPisPasep = args.numeroNisPisPasep;
    }
    if (args.paisNascimento !== undefined) {
      this.paisNascimento = args.paisNascimento;
    }
    if (args.racaCorCidadao !== undefined) {
      this.racaCorCidadao = args.racaCorCidadao;
    }
    if (args.sexoCidadao !== undefined) {
      this.sexoCidadao = args.sexoCidadao;
    }
    if (args.statusEhResponsavel !== undefined) {
      this.statusEhResponsavel = args.statusEhResponsavel;
    }
    if (args.etnia !== undefined) {
      this.etnia = args.etnia;
    }
    if (args.nomePaiCidadao !== undefined) {
      this.nomePaiCidadao = args.nomePaiCidadao;
    }
    if (args.desconheceNomePai !== undefined) {
      this.desconheceNomePai = args.desconheceNomePai;
    }
    if (args.dtNaturalizacao !== undefined) {
      this.dtNaturalizacao = args.dtNaturalizacao;
    }
    if (args.portariaNaturalizacao !== undefined) {
      this.portariaNaturalizacao = args.portariaNaturalizacao;
    }
    if (args.dtEntradaBrasil !== undefined) {
      this.dtEntradaBrasil = args.dtEntradaBrasil;
    }
    if (args.microArea !== undefined) {
      this.microArea = args.microArea;
    }
    if (args.stForaArea !== undefined) {
      this.stForaArea = args.stForaArea;
    }
    if (args.cpfCidadao !== undefined) {
      this.cpfCidadao = args.cpfCidadao;
    }
    if (args.cpfResponsavelFamiliar !== undefined) {
      this.cpfResponsavelFamiliar = args.cpfResponsavelFamiliar;
    }
  }
};
IdentificacaoUsuarioCidadaoThrift.prototype = {};
IdentificacaoUsuarioCidadaoThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nomeSocial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.codigoIbgeMunicipioNascimento = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dataNascimentoCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.desconheceNomeMae = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.emailCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.nacionalidadeCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.nomeCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.nomeMaeCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.cnsCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.cnsResponsavelFamiliar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.telefoneCelular = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.numeroNisPisPasep = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.paisNascimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.racaCorCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.sexoCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.statusEhResponsavel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.etnia = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.nomePaiCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.desconheceNomePai = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.dtNaturalizacao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.portariaNaturalizacao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I64) {
        this.dtEntradaBrasil = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.microArea = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.stForaArea = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.cpfCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.cpfResponsavelFamiliar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentificacaoUsuarioCidadaoThrift.prototype.write = function(output) {
  output.writeStructBegin('IdentificacaoUsuarioCidadaoThrift');
  if (this.nomeSocial !== null && this.nomeSocial !== undefined) {
    output.writeFieldBegin('nomeSocial', Thrift.Type.STRING, 1);
    output.writeString(this.nomeSocial);
    output.writeFieldEnd();
  }
  if (this.codigoIbgeMunicipioNascimento !== null && this.codigoIbgeMunicipioNascimento !== undefined) {
    output.writeFieldBegin('codigoIbgeMunicipioNascimento', Thrift.Type.STRING, 2);
    output.writeString(this.codigoIbgeMunicipioNascimento);
    output.writeFieldEnd();
  }
  if (this.dataNascimentoCidadao !== null && this.dataNascimentoCidadao !== undefined) {
    output.writeFieldBegin('dataNascimentoCidadao', Thrift.Type.I64, 3);
    output.writeI64(this.dataNascimentoCidadao);
    output.writeFieldEnd();
  }
  if (this.desconheceNomeMae !== null && this.desconheceNomeMae !== undefined) {
    output.writeFieldBegin('desconheceNomeMae', Thrift.Type.BOOL, 5);
    output.writeBool(this.desconheceNomeMae);
    output.writeFieldEnd();
  }
  if (this.emailCidadao !== null && this.emailCidadao !== undefined) {
    output.writeFieldBegin('emailCidadao', Thrift.Type.STRING, 6);
    output.writeString(this.emailCidadao);
    output.writeFieldEnd();
  }
  if (this.nacionalidadeCidadao !== null && this.nacionalidadeCidadao !== undefined) {
    output.writeFieldBegin('nacionalidadeCidadao', Thrift.Type.I64, 7);
    output.writeI64(this.nacionalidadeCidadao);
    output.writeFieldEnd();
  }
  if (this.nomeCidadao !== null && this.nomeCidadao !== undefined) {
    output.writeFieldBegin('nomeCidadao', Thrift.Type.STRING, 8);
    output.writeString(this.nomeCidadao);
    output.writeFieldEnd();
  }
  if (this.nomeMaeCidadao !== null && this.nomeMaeCidadao !== undefined) {
    output.writeFieldBegin('nomeMaeCidadao', Thrift.Type.STRING, 9);
    output.writeString(this.nomeMaeCidadao);
    output.writeFieldEnd();
  }
  if (this.cnsCidadao !== null && this.cnsCidadao !== undefined) {
    output.writeFieldBegin('cnsCidadao', Thrift.Type.STRING, 10);
    output.writeString(this.cnsCidadao);
    output.writeFieldEnd();
  }
  if (this.cnsResponsavelFamiliar !== null && this.cnsResponsavelFamiliar !== undefined) {
    output.writeFieldBegin('cnsResponsavelFamiliar', Thrift.Type.STRING, 11);
    output.writeString(this.cnsResponsavelFamiliar);
    output.writeFieldEnd();
  }
  if (this.telefoneCelular !== null && this.telefoneCelular !== undefined) {
    output.writeFieldBegin('telefoneCelular', Thrift.Type.STRING, 12);
    output.writeString(this.telefoneCelular);
    output.writeFieldEnd();
  }
  if (this.numeroNisPisPasep !== null && this.numeroNisPisPasep !== undefined) {
    output.writeFieldBegin('numeroNisPisPasep', Thrift.Type.STRING, 13);
    output.writeString(this.numeroNisPisPasep);
    output.writeFieldEnd();
  }
  if (this.paisNascimento !== null && this.paisNascimento !== undefined) {
    output.writeFieldBegin('paisNascimento', Thrift.Type.I64, 14);
    output.writeI64(this.paisNascimento);
    output.writeFieldEnd();
  }
  if (this.racaCorCidadao !== null && this.racaCorCidadao !== undefined) {
    output.writeFieldBegin('racaCorCidadao', Thrift.Type.I64, 15);
    output.writeI64(this.racaCorCidadao);
    output.writeFieldEnd();
  }
  if (this.sexoCidadao !== null && this.sexoCidadao !== undefined) {
    output.writeFieldBegin('sexoCidadao', Thrift.Type.I64, 16);
    output.writeI64(this.sexoCidadao);
    output.writeFieldEnd();
  }
  if (this.statusEhResponsavel !== null && this.statusEhResponsavel !== undefined) {
    output.writeFieldBegin('statusEhResponsavel', Thrift.Type.BOOL, 17);
    output.writeBool(this.statusEhResponsavel);
    output.writeFieldEnd();
  }
  if (this.etnia !== null && this.etnia !== undefined) {
    output.writeFieldBegin('etnia', Thrift.Type.I64, 18);
    output.writeI64(this.etnia);
    output.writeFieldEnd();
  }
  if (this.nomePaiCidadao !== null && this.nomePaiCidadao !== undefined) {
    output.writeFieldBegin('nomePaiCidadao', Thrift.Type.STRING, 19);
    output.writeString(this.nomePaiCidadao);
    output.writeFieldEnd();
  }
  if (this.desconheceNomePai !== null && this.desconheceNomePai !== undefined) {
    output.writeFieldBegin('desconheceNomePai', Thrift.Type.BOOL, 20);
    output.writeBool(this.desconheceNomePai);
    output.writeFieldEnd();
  }
  if (this.dtNaturalizacao !== null && this.dtNaturalizacao !== undefined) {
    output.writeFieldBegin('dtNaturalizacao', Thrift.Type.I64, 21);
    output.writeI64(this.dtNaturalizacao);
    output.writeFieldEnd();
  }
  if (this.portariaNaturalizacao !== null && this.portariaNaturalizacao !== undefined) {
    output.writeFieldBegin('portariaNaturalizacao', Thrift.Type.STRING, 22);
    output.writeString(this.portariaNaturalizacao);
    output.writeFieldEnd();
  }
  if (this.dtEntradaBrasil !== null && this.dtEntradaBrasil !== undefined) {
    output.writeFieldBegin('dtEntradaBrasil', Thrift.Type.I64, 23);
    output.writeI64(this.dtEntradaBrasil);
    output.writeFieldEnd();
  }
  if (this.microArea !== null && this.microArea !== undefined) {
    output.writeFieldBegin('microArea', Thrift.Type.STRING, 24);
    output.writeString(this.microArea);
    output.writeFieldEnd();
  }
  if (this.stForaArea !== null && this.stForaArea !== undefined) {
    output.writeFieldBegin('stForaArea', Thrift.Type.BOOL, 25);
    output.writeBool(this.stForaArea);
    output.writeFieldEnd();
  }
  if (this.cpfCidadao !== null && this.cpfCidadao !== undefined) {
    output.writeFieldBegin('cpfCidadao', Thrift.Type.STRING, 26);
    output.writeString(this.cpfCidadao);
    output.writeFieldEnd();
  }
  if (this.cpfResponsavelFamiliar !== null && this.cpfResponsavelFamiliar !== undefined) {
    output.writeFieldBegin('cpfResponsavelFamiliar', Thrift.Type.STRING, 27);
    output.writeString(this.cpfResponsavelFamiliar);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InformacoesSocioDemograficasThrift = module.exports.InformacoesSocioDemograficasThrift = function(args) {
  this.deficienciasCidadao = null;
  this.grauInstrucaoCidadao = null;
  this.ocupacaoCodigoCbo2002 = null;
  this.orientacaoSexualCidadao = null;
  this.povoComunidadeTradicional = null;
  this.relacaoParentescoCidadao = null;
  this.situacaoMercadoTrabalhoCidadao = null;
  this.statusDesejaInformarOrientacaoSexual = null;
  this.statusFrequentaBenzedeira = null;
  this.statusFrequentaEscola = null;
  this.statusMembroPovoComunidadeTradicional = null;
  this.statusParticipaGrupoComunitario = null;
  this.statusPossuiPlanoSaudePrivado = null;
  this.statusTemAlgumaDeficiencia = null;
  this.identidadeGeneroCidadao = null;
  this.statusDesejaInformarIdentidadeGenero = null;
  this.responsavelPorCrianca = null;
  if (args) {
    if (args.deficienciasCidadao !== undefined) {
      this.deficienciasCidadao = args.deficienciasCidadao;
    }
    if (args.grauInstrucaoCidadao !== undefined) {
      this.grauInstrucaoCidadao = args.grauInstrucaoCidadao;
    }
    if (args.ocupacaoCodigoCbo2002 !== undefined) {
      this.ocupacaoCodigoCbo2002 = args.ocupacaoCodigoCbo2002;
    }
    if (args.orientacaoSexualCidadao !== undefined) {
      this.orientacaoSexualCidadao = args.orientacaoSexualCidadao;
    }
    if (args.povoComunidadeTradicional !== undefined) {
      this.povoComunidadeTradicional = args.povoComunidadeTradicional;
    }
    if (args.relacaoParentescoCidadao !== undefined) {
      this.relacaoParentescoCidadao = args.relacaoParentescoCidadao;
    }
    if (args.situacaoMercadoTrabalhoCidadao !== undefined) {
      this.situacaoMercadoTrabalhoCidadao = args.situacaoMercadoTrabalhoCidadao;
    }
    if (args.statusDesejaInformarOrientacaoSexual !== undefined) {
      this.statusDesejaInformarOrientacaoSexual = args.statusDesejaInformarOrientacaoSexual;
    }
    if (args.statusFrequentaBenzedeira !== undefined) {
      this.statusFrequentaBenzedeira = args.statusFrequentaBenzedeira;
    }
    if (args.statusFrequentaEscola !== undefined) {
      this.statusFrequentaEscola = args.statusFrequentaEscola;
    }
    if (args.statusMembroPovoComunidadeTradicional !== undefined) {
      this.statusMembroPovoComunidadeTradicional = args.statusMembroPovoComunidadeTradicional;
    }
    if (args.statusParticipaGrupoComunitario !== undefined) {
      this.statusParticipaGrupoComunitario = args.statusParticipaGrupoComunitario;
    }
    if (args.statusPossuiPlanoSaudePrivado !== undefined) {
      this.statusPossuiPlanoSaudePrivado = args.statusPossuiPlanoSaudePrivado;
    }
    if (args.statusTemAlgumaDeficiencia !== undefined) {
      this.statusTemAlgumaDeficiencia = args.statusTemAlgumaDeficiencia;
    }
    if (args.identidadeGeneroCidadao !== undefined) {
      this.identidadeGeneroCidadao = args.identidadeGeneroCidadao;
    }
    if (args.statusDesejaInformarIdentidadeGenero !== undefined) {
      this.statusDesejaInformarIdentidadeGenero = args.statusDesejaInformarIdentidadeGenero;
    }
    if (args.responsavelPorCrianca !== undefined) {
      this.responsavelPorCrianca = args.responsavelPorCrianca;
    }
  }
};
InformacoesSocioDemograficasThrift.prototype = {};
InformacoesSocioDemograficasThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.deficienciasCidadao = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI64();
          this.deficienciasCidadao.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.grauInstrucaoCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ocupacaoCodigoCbo2002 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.orientacaoSexualCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.povoComunidadeTradicional = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.relacaoParentescoCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.situacaoMercadoTrabalhoCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.statusDesejaInformarOrientacaoSexual = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.statusFrequentaBenzedeira = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.statusFrequentaEscola = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.statusMembroPovoComunidadeTradicional = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.statusParticipaGrupoComunitario = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.statusPossuiPlanoSaudePrivado = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTemAlgumaDeficiencia = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.identidadeGeneroCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.statusDesejaInformarIdentidadeGenero = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.LIST) {
        var _size47 = 0;
        var _rtmp351;
        this.responsavelPorCrianca = [];
        var _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var elem53 = null;
          elem53 = input.readI64();
          this.responsavelPorCrianca.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InformacoesSocioDemograficasThrift.prototype.write = function(output) {
  output.writeStructBegin('InformacoesSocioDemograficasThrift');
  if (this.deficienciasCidadao !== null && this.deficienciasCidadao !== undefined) {
    output.writeFieldBegin('deficienciasCidadao', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.deficienciasCidadao.length);
    for (var iter54 in this.deficienciasCidadao)
    {
      if (this.deficienciasCidadao.hasOwnProperty(iter54))
      {
        iter54 = this.deficienciasCidadao[iter54];
        output.writeI64(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.grauInstrucaoCidadao !== null && this.grauInstrucaoCidadao !== undefined) {
    output.writeFieldBegin('grauInstrucaoCidadao', Thrift.Type.I64, 2);
    output.writeI64(this.grauInstrucaoCidadao);
    output.writeFieldEnd();
  }
  if (this.ocupacaoCodigoCbo2002 !== null && this.ocupacaoCodigoCbo2002 !== undefined) {
    output.writeFieldBegin('ocupacaoCodigoCbo2002', Thrift.Type.STRING, 4);
    output.writeString(this.ocupacaoCodigoCbo2002);
    output.writeFieldEnd();
  }
  if (this.orientacaoSexualCidadao !== null && this.orientacaoSexualCidadao !== undefined) {
    output.writeFieldBegin('orientacaoSexualCidadao', Thrift.Type.I64, 5);
    output.writeI64(this.orientacaoSexualCidadao);
    output.writeFieldEnd();
  }
  if (this.povoComunidadeTradicional !== null && this.povoComunidadeTradicional !== undefined) {
    output.writeFieldBegin('povoComunidadeTradicional', Thrift.Type.STRING, 6);
    output.writeString(this.povoComunidadeTradicional);
    output.writeFieldEnd();
  }
  if (this.relacaoParentescoCidadao !== null && this.relacaoParentescoCidadao !== undefined) {
    output.writeFieldBegin('relacaoParentescoCidadao', Thrift.Type.I64, 7);
    output.writeI64(this.relacaoParentescoCidadao);
    output.writeFieldEnd();
  }
  if (this.situacaoMercadoTrabalhoCidadao !== null && this.situacaoMercadoTrabalhoCidadao !== undefined) {
    output.writeFieldBegin('situacaoMercadoTrabalhoCidadao', Thrift.Type.I64, 9);
    output.writeI64(this.situacaoMercadoTrabalhoCidadao);
    output.writeFieldEnd();
  }
  if (this.statusDesejaInformarOrientacaoSexual !== null && this.statusDesejaInformarOrientacaoSexual !== undefined) {
    output.writeFieldBegin('statusDesejaInformarOrientacaoSexual', Thrift.Type.BOOL, 10);
    output.writeBool(this.statusDesejaInformarOrientacaoSexual);
    output.writeFieldEnd();
  }
  if (this.statusFrequentaBenzedeira !== null && this.statusFrequentaBenzedeira !== undefined) {
    output.writeFieldBegin('statusFrequentaBenzedeira', Thrift.Type.BOOL, 11);
    output.writeBool(this.statusFrequentaBenzedeira);
    output.writeFieldEnd();
  }
  if (this.statusFrequentaEscola !== null && this.statusFrequentaEscola !== undefined) {
    output.writeFieldBegin('statusFrequentaEscola', Thrift.Type.BOOL, 12);
    output.writeBool(this.statusFrequentaEscola);
    output.writeFieldEnd();
  }
  if (this.statusMembroPovoComunidadeTradicional !== null && this.statusMembroPovoComunidadeTradicional !== undefined) {
    output.writeFieldBegin('statusMembroPovoComunidadeTradicional', Thrift.Type.BOOL, 13);
    output.writeBool(this.statusMembroPovoComunidadeTradicional);
    output.writeFieldEnd();
  }
  if (this.statusParticipaGrupoComunitario !== null && this.statusParticipaGrupoComunitario !== undefined) {
    output.writeFieldBegin('statusParticipaGrupoComunitario', Thrift.Type.BOOL, 14);
    output.writeBool(this.statusParticipaGrupoComunitario);
    output.writeFieldEnd();
  }
  if (this.statusPossuiPlanoSaudePrivado !== null && this.statusPossuiPlanoSaudePrivado !== undefined) {
    output.writeFieldBegin('statusPossuiPlanoSaudePrivado', Thrift.Type.BOOL, 15);
    output.writeBool(this.statusPossuiPlanoSaudePrivado);
    output.writeFieldEnd();
  }
  if (this.statusTemAlgumaDeficiencia !== null && this.statusTemAlgumaDeficiencia !== undefined) {
    output.writeFieldBegin('statusTemAlgumaDeficiencia', Thrift.Type.BOOL, 16);
    output.writeBool(this.statusTemAlgumaDeficiencia);
    output.writeFieldEnd();
  }
  if (this.identidadeGeneroCidadao !== null && this.identidadeGeneroCidadao !== undefined) {
    output.writeFieldBegin('identidadeGeneroCidadao', Thrift.Type.I64, 17);
    output.writeI64(this.identidadeGeneroCidadao);
    output.writeFieldEnd();
  }
  if (this.statusDesejaInformarIdentidadeGenero !== null && this.statusDesejaInformarIdentidadeGenero !== undefined) {
    output.writeFieldBegin('statusDesejaInformarIdentidadeGenero', Thrift.Type.BOOL, 18);
    output.writeBool(this.statusDesejaInformarIdentidadeGenero);
    output.writeFieldEnd();
  }
  if (this.responsavelPorCrianca !== null && this.responsavelPorCrianca !== undefined) {
    output.writeFieldBegin('responsavelPorCrianca', Thrift.Type.LIST, 19);
    output.writeListBegin(Thrift.Type.I64, this.responsavelPorCrianca.length);
    for (var iter55 in this.responsavelPorCrianca)
    {
      if (this.responsavelPorCrianca.hasOwnProperty(iter55))
      {
        iter55 = this.responsavelPorCrianca[iter55];
        output.writeI64(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SaidaCidadaoCadastroThrift = module.exports.SaidaCidadaoCadastroThrift = function(args) {
  this.motivoSaidaCidadao = null;
  this.dataObito = null;
  this.numeroDO = null;
  if (args) {
    if (args.motivoSaidaCidadao !== undefined) {
      this.motivoSaidaCidadao = args.motivoSaidaCidadao;
    }
    if (args.dataObito !== undefined) {
      this.dataObito = args.dataObito;
    }
    if (args.numeroDO !== undefined) {
      this.numeroDO = args.numeroDO;
    }
  }
};
SaidaCidadaoCadastroThrift.prototype = {};
SaidaCidadaoCadastroThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.motivoSaidaCidadao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.dataObito = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.numeroDO = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SaidaCidadaoCadastroThrift.prototype.write = function(output) {
  output.writeStructBegin('SaidaCidadaoCadastroThrift');
  if (this.motivoSaidaCidadao !== null && this.motivoSaidaCidadao !== undefined) {
    output.writeFieldBegin('motivoSaidaCidadao', Thrift.Type.I64, 1);
    output.writeI64(this.motivoSaidaCidadao);
    output.writeFieldEnd();
  }
  if (this.dataObito !== null && this.dataObito !== undefined) {
    output.writeFieldBegin('dataObito', Thrift.Type.I64, 2);
    output.writeI64(this.dataObito);
    output.writeFieldEnd();
  }
  if (this.numeroDO !== null && this.numeroDO !== undefined) {
    output.writeFieldBegin('numeroDO', Thrift.Type.STRING, 3);
    output.writeString(this.numeroDO);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CadastroIndividualThrift = module.exports.CadastroIndividualThrift = function(args) {
  this.condicoesDeSaude = null;
  this.emSituacaoDeRua = null;
  this.fichaAtualizada = null;
  this.identificacaoUsuarioCidadao = null;
  this.informacoesSocioDemograficas = null;
  this.statusTermoRecusaCadastroIndividualAtencaoBasica = null;
  this.tpCdsOrigem = null;
  this.uuid = null;
  this.uuidFichaOriginadora = null;
  this.uuidCidadao = null;
  this.saidaCidadaoCadastro = null;
  this.headerTransport = null;
  if (args) {
    if (args.condicoesDeSaude !== undefined) {
      this.condicoesDeSaude = args.condicoesDeSaude;
    }
    if (args.emSituacaoDeRua !== undefined) {
      this.emSituacaoDeRua = args.emSituacaoDeRua;
    }
    if (args.fichaAtualizada !== undefined) {
      this.fichaAtualizada = args.fichaAtualizada;
    }
    if (args.identificacaoUsuarioCidadao !== undefined) {
      this.identificacaoUsuarioCidadao = args.identificacaoUsuarioCidadao;
    }
    if (args.informacoesSocioDemograficas !== undefined) {
      this.informacoesSocioDemograficas = args.informacoesSocioDemograficas;
    }
    if (args.statusTermoRecusaCadastroIndividualAtencaoBasica !== undefined) {
      this.statusTermoRecusaCadastroIndividualAtencaoBasica = args.statusTermoRecusaCadastroIndividualAtencaoBasica;
    }
    if (args.tpCdsOrigem !== undefined) {
      this.tpCdsOrigem = args.tpCdsOrigem;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.uuidFichaOriginadora !== undefined) {
      this.uuidFichaOriginadora = args.uuidFichaOriginadora;
    }
    if (args.uuidCidadao !== undefined) {
      this.uuidCidadao = args.uuidCidadao;
    }
    if (args.saidaCidadaoCadastro !== undefined) {
      this.saidaCidadaoCadastro = args.saidaCidadaoCadastro;
    }
    if (args.headerTransport !== undefined) {
      this.headerTransport = args.headerTransport;
    }
  }
};
CadastroIndividualThrift.prototype = {};
CadastroIndividualThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condicoesDeSaude = new ttypes.CondicoesDeSaudeThrift();
        this.condicoesDeSaude.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.emSituacaoDeRua = new ttypes.EmSituacaoDeRuaThrift();
        this.emSituacaoDeRua.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.fichaAtualizada = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.identificacaoUsuarioCidadao = new ttypes.IdentificacaoUsuarioCidadaoThrift();
        this.identificacaoUsuarioCidadao.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.informacoesSocioDemograficas = new ttypes.InformacoesSocioDemograficasThrift();
        this.informacoesSocioDemograficas.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.statusTermoRecusaCadastroIndividualAtencaoBasica = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.tpCdsOrigem = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.uuidFichaOriginadora = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.uuidCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.saidaCidadaoCadastro = new ttypes.SaidaCidadaoCadastroThrift();
        this.saidaCidadaoCadastro.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.headerTransport = new common_ttypes.UnicaLotacaoHeaderThrift();
        this.headerTransport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CadastroIndividualThrift.prototype.write = function(output) {
  output.writeStructBegin('CadastroIndividualThrift');
  if (this.condicoesDeSaude !== null && this.condicoesDeSaude !== undefined) {
    output.writeFieldBegin('condicoesDeSaude', Thrift.Type.STRUCT, 1);
    this.condicoesDeSaude.write(output);
    output.writeFieldEnd();
  }
  if (this.emSituacaoDeRua !== null && this.emSituacaoDeRua !== undefined) {
    output.writeFieldBegin('emSituacaoDeRua', Thrift.Type.STRUCT, 3);
    this.emSituacaoDeRua.write(output);
    output.writeFieldEnd();
  }
  if (this.fichaAtualizada !== null && this.fichaAtualizada !== undefined) {
    output.writeFieldBegin('fichaAtualizada', Thrift.Type.BOOL, 4);
    output.writeBool(this.fichaAtualizada);
    output.writeFieldEnd();
  }
  if (this.identificacaoUsuarioCidadao !== null && this.identificacaoUsuarioCidadao !== undefined) {
    output.writeFieldBegin('identificacaoUsuarioCidadao', Thrift.Type.STRUCT, 5);
    this.identificacaoUsuarioCidadao.write(output);
    output.writeFieldEnd();
  }
  if (this.informacoesSocioDemograficas !== null && this.informacoesSocioDemograficas !== undefined) {
    output.writeFieldBegin('informacoesSocioDemograficas', Thrift.Type.STRUCT, 6);
    this.informacoesSocioDemograficas.write(output);
    output.writeFieldEnd();
  }
  if (this.statusTermoRecusaCadastroIndividualAtencaoBasica !== null && this.statusTermoRecusaCadastroIndividualAtencaoBasica !== undefined) {
    output.writeFieldBegin('statusTermoRecusaCadastroIndividualAtencaoBasica', Thrift.Type.BOOL, 7);
    output.writeBool(this.statusTermoRecusaCadastroIndividualAtencaoBasica);
    output.writeFieldEnd();
  }
  if (this.tpCdsOrigem !== null && this.tpCdsOrigem !== undefined) {
    output.writeFieldBegin('tpCdsOrigem', Thrift.Type.I32, 8);
    output.writeI32(this.tpCdsOrigem);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 9);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.uuidFichaOriginadora !== null && this.uuidFichaOriginadora !== undefined) {
    output.writeFieldBegin('uuidFichaOriginadora', Thrift.Type.STRING, 10);
    output.writeString(this.uuidFichaOriginadora);
    output.writeFieldEnd();
  }
  if (this.uuidCidadao !== null && this.uuidCidadao !== undefined) {
    output.writeFieldBegin('uuidCidadao', Thrift.Type.STRING, 11);
    output.writeString(this.uuidCidadao);
    output.writeFieldEnd();
  }
  if (this.saidaCidadaoCadastro !== null && this.saidaCidadaoCadastro !== undefined) {
    output.writeFieldBegin('saidaCidadaoCadastro', Thrift.Type.STRUCT, 12);
    this.saidaCidadaoCadastro.write(output);
    output.writeFieldEnd();
  }
  if (this.headerTransport !== null && this.headerTransport !== undefined) {
    output.writeFieldBegin('headerTransport', Thrift.Type.STRUCT, 13);
    this.headerTransport.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

