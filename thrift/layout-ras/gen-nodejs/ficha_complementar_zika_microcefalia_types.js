//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
FichaComplementarZikaMicrocefaliaThrift = module.exports.FichaComplementarZikaMicrocefaliaThrift = function(args) {
  this.headerTransport = null;
  this.uuidFicha = null;
  this.tpCdsOrigem = null;
  this.turno = null;
  this.cnsCidadao = null;
  this.cnsResponsavelFamiliar = null;
  this.dataRealizacaoTesteOlhinho = null;
  this.coResultadoTesteOlhinho = null;
  this.dataRealizacaoExameFundoOlho = null;
  this.coResultadoExameFundoOlho = null;
  this.dataRealizacaoTesteOrelhinha = null;
  this.coResultadoTesteOrelhinha = null;
  this.dataRealizacaoUSTransfontanela = null;
  this.coResultadoUsTransfontanela = null;
  this.dataRealizacaoTomografiaComputadorizada = null;
  this.coResultadoTomografiaComputadorizada = null;
  this.dataRealizacaoRessonanciaMagnetica = null;
  this.coResultadoRessonanciaMagnetica = null;
  this.cpfCidadao = null;
  this.cpfResponsavelFamiliar = null;
  if (args) {
    if (args.headerTransport !== undefined) {
      this.headerTransport = args.headerTransport;
    }
    if (args.uuidFicha !== undefined) {
      this.uuidFicha = args.uuidFicha;
    }
    if (args.tpCdsOrigem !== undefined) {
      this.tpCdsOrigem = args.tpCdsOrigem;
    }
    if (args.turno !== undefined) {
      this.turno = args.turno;
    }
    if (args.cnsCidadao !== undefined) {
      this.cnsCidadao = args.cnsCidadao;
    }
    if (args.cnsResponsavelFamiliar !== undefined) {
      this.cnsResponsavelFamiliar = args.cnsResponsavelFamiliar;
    }
    if (args.dataRealizacaoTesteOlhinho !== undefined) {
      this.dataRealizacaoTesteOlhinho = args.dataRealizacaoTesteOlhinho;
    }
    if (args.coResultadoTesteOlhinho !== undefined) {
      this.coResultadoTesteOlhinho = args.coResultadoTesteOlhinho;
    }
    if (args.dataRealizacaoExameFundoOlho !== undefined) {
      this.dataRealizacaoExameFundoOlho = args.dataRealizacaoExameFundoOlho;
    }
    if (args.coResultadoExameFundoOlho !== undefined) {
      this.coResultadoExameFundoOlho = args.coResultadoExameFundoOlho;
    }
    if (args.dataRealizacaoTesteOrelhinha !== undefined) {
      this.dataRealizacaoTesteOrelhinha = args.dataRealizacaoTesteOrelhinha;
    }
    if (args.coResultadoTesteOrelhinha !== undefined) {
      this.coResultadoTesteOrelhinha = args.coResultadoTesteOrelhinha;
    }
    if (args.dataRealizacaoUSTransfontanela !== undefined) {
      this.dataRealizacaoUSTransfontanela = args.dataRealizacaoUSTransfontanela;
    }
    if (args.coResultadoUsTransfontanela !== undefined) {
      this.coResultadoUsTransfontanela = args.coResultadoUsTransfontanela;
    }
    if (args.dataRealizacaoTomografiaComputadorizada !== undefined) {
      this.dataRealizacaoTomografiaComputadorizada = args.dataRealizacaoTomografiaComputadorizada;
    }
    if (args.coResultadoTomografiaComputadorizada !== undefined) {
      this.coResultadoTomografiaComputadorizada = args.coResultadoTomografiaComputadorizada;
    }
    if (args.dataRealizacaoRessonanciaMagnetica !== undefined) {
      this.dataRealizacaoRessonanciaMagnetica = args.dataRealizacaoRessonanciaMagnetica;
    }
    if (args.coResultadoRessonanciaMagnetica !== undefined) {
      this.coResultadoRessonanciaMagnetica = args.coResultadoRessonanciaMagnetica;
    }
    if (args.cpfCidadao !== undefined) {
      this.cpfCidadao = args.cpfCidadao;
    }
    if (args.cpfResponsavelFamiliar !== undefined) {
      this.cpfResponsavelFamiliar = args.cpfResponsavelFamiliar;
    }
  }
};
FichaComplementarZikaMicrocefaliaThrift.prototype = {};
FichaComplementarZikaMicrocefaliaThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headerTransport = new common_ttypes.UnicaLotacaoHeaderThrift();
        this.headerTransport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuidFicha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tpCdsOrigem = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.turno = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cnsCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cnsResponsavelFamiliar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacaoTesteOlhinho = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.coResultadoTesteOlhinho = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacaoExameFundoOlho = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.coResultadoExameFundoOlho = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacaoTesteOrelhinha = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.coResultadoTesteOrelhinha = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacaoUSTransfontanela = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.coResultadoUsTransfontanela = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacaoTomografiaComputadorizada = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.coResultadoTomografiaComputadorizada = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacaoRessonanciaMagnetica = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.coResultadoRessonanciaMagnetica = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.cpfCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.cpfResponsavelFamiliar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaComplementarZikaMicrocefaliaThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaComplementarZikaMicrocefaliaThrift');
  if (this.headerTransport !== null && this.headerTransport !== undefined) {
    output.writeFieldBegin('headerTransport', Thrift.Type.STRUCT, 1);
    this.headerTransport.write(output);
    output.writeFieldEnd();
  }
  if (this.uuidFicha !== null && this.uuidFicha !== undefined) {
    output.writeFieldBegin('uuidFicha', Thrift.Type.STRING, 2);
    output.writeString(this.uuidFicha);
    output.writeFieldEnd();
  }
  if (this.tpCdsOrigem !== null && this.tpCdsOrigem !== undefined) {
    output.writeFieldBegin('tpCdsOrigem', Thrift.Type.I32, 3);
    output.writeI32(this.tpCdsOrigem);
    output.writeFieldEnd();
  }
  if (this.turno !== null && this.turno !== undefined) {
    output.writeFieldBegin('turno', Thrift.Type.I64, 4);
    output.writeI64(this.turno);
    output.writeFieldEnd();
  }
  if (this.cnsCidadao !== null && this.cnsCidadao !== undefined) {
    output.writeFieldBegin('cnsCidadao', Thrift.Type.STRING, 5);
    output.writeString(this.cnsCidadao);
    output.writeFieldEnd();
  }
  if (this.cnsResponsavelFamiliar !== null && this.cnsResponsavelFamiliar !== undefined) {
    output.writeFieldBegin('cnsResponsavelFamiliar', Thrift.Type.STRING, 6);
    output.writeString(this.cnsResponsavelFamiliar);
    output.writeFieldEnd();
  }
  if (this.dataRealizacaoTesteOlhinho !== null && this.dataRealizacaoTesteOlhinho !== undefined) {
    output.writeFieldBegin('dataRealizacaoTesteOlhinho', Thrift.Type.I64, 7);
    output.writeI64(this.dataRealizacaoTesteOlhinho);
    output.writeFieldEnd();
  }
  if (this.coResultadoTesteOlhinho !== null && this.coResultadoTesteOlhinho !== undefined) {
    output.writeFieldBegin('coResultadoTesteOlhinho', Thrift.Type.I64, 8);
    output.writeI64(this.coResultadoTesteOlhinho);
    output.writeFieldEnd();
  }
  if (this.dataRealizacaoExameFundoOlho !== null && this.dataRealizacaoExameFundoOlho !== undefined) {
    output.writeFieldBegin('dataRealizacaoExameFundoOlho', Thrift.Type.I64, 9);
    output.writeI64(this.dataRealizacaoExameFundoOlho);
    output.writeFieldEnd();
  }
  if (this.coResultadoExameFundoOlho !== null && this.coResultadoExameFundoOlho !== undefined) {
    output.writeFieldBegin('coResultadoExameFundoOlho', Thrift.Type.I64, 10);
    output.writeI64(this.coResultadoExameFundoOlho);
    output.writeFieldEnd();
  }
  if (this.dataRealizacaoTesteOrelhinha !== null && this.dataRealizacaoTesteOrelhinha !== undefined) {
    output.writeFieldBegin('dataRealizacaoTesteOrelhinha', Thrift.Type.I64, 11);
    output.writeI64(this.dataRealizacaoTesteOrelhinha);
    output.writeFieldEnd();
  }
  if (this.coResultadoTesteOrelhinha !== null && this.coResultadoTesteOrelhinha !== undefined) {
    output.writeFieldBegin('coResultadoTesteOrelhinha', Thrift.Type.I64, 12);
    output.writeI64(this.coResultadoTesteOrelhinha);
    output.writeFieldEnd();
  }
  if (this.dataRealizacaoUSTransfontanela !== null && this.dataRealizacaoUSTransfontanela !== undefined) {
    output.writeFieldBegin('dataRealizacaoUSTransfontanela', Thrift.Type.I64, 13);
    output.writeI64(this.dataRealizacaoUSTransfontanela);
    output.writeFieldEnd();
  }
  if (this.coResultadoUsTransfontanela !== null && this.coResultadoUsTransfontanela !== undefined) {
    output.writeFieldBegin('coResultadoUsTransfontanela', Thrift.Type.I64, 14);
    output.writeI64(this.coResultadoUsTransfontanela);
    output.writeFieldEnd();
  }
  if (this.dataRealizacaoTomografiaComputadorizada !== null && this.dataRealizacaoTomografiaComputadorizada !== undefined) {
    output.writeFieldBegin('dataRealizacaoTomografiaComputadorizada', Thrift.Type.I64, 15);
    output.writeI64(this.dataRealizacaoTomografiaComputadorizada);
    output.writeFieldEnd();
  }
  if (this.coResultadoTomografiaComputadorizada !== null && this.coResultadoTomografiaComputadorizada !== undefined) {
    output.writeFieldBegin('coResultadoTomografiaComputadorizada', Thrift.Type.I64, 16);
    output.writeI64(this.coResultadoTomografiaComputadorizada);
    output.writeFieldEnd();
  }
  if (this.dataRealizacaoRessonanciaMagnetica !== null && this.dataRealizacaoRessonanciaMagnetica !== undefined) {
    output.writeFieldBegin('dataRealizacaoRessonanciaMagnetica', Thrift.Type.I64, 17);
    output.writeI64(this.dataRealizacaoRessonanciaMagnetica);
    output.writeFieldEnd();
  }
  if (this.coResultadoRessonanciaMagnetica !== null && this.coResultadoRessonanciaMagnetica !== undefined) {
    output.writeFieldBegin('coResultadoRessonanciaMagnetica', Thrift.Type.I64, 18);
    output.writeI64(this.coResultadoRessonanciaMagnetica);
    output.writeFieldEnd();
  }
  if (this.cpfCidadao !== null && this.cpfCidadao !== undefined) {
    output.writeFieldBegin('cpfCidadao', Thrift.Type.STRING, 19);
    output.writeString(this.cpfCidadao);
    output.writeFieldEnd();
  }
  if (this.cpfResponsavelFamiliar !== null && this.cpfResponsavelFamiliar !== undefined) {
    output.writeFieldBegin('cpfResponsavelFamiliar', Thrift.Type.STRING, 20);
    output.writeString(this.cpfResponsavelFamiliar);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

