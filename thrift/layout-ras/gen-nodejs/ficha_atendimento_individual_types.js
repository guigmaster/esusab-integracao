//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
ExameThrift = module.exports.ExameThrift = function(args) {
  this.codigoExame = null;
  this.solicitadoAvaliado = null;
  if (args) {
    if (args.codigoExame !== undefined) {
      this.codigoExame = args.codigoExame;
    }
    if (args.solicitadoAvaliado !== undefined) {
      this.solicitadoAvaliado = args.solicitadoAvaliado;
    }
  }
};
ExameThrift.prototype = {};
ExameThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.codigoExame = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.solicitadoAvaliado = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.solicitadoAvaliado.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExameThrift.prototype.write = function(output) {
  output.writeStructBegin('ExameThrift');
  if (this.codigoExame !== null && this.codigoExame !== undefined) {
    output.writeFieldBegin('codigoExame', Thrift.Type.STRING, 1);
    output.writeString(this.codigoExame);
    output.writeFieldEnd();
  }
  if (this.solicitadoAvaliado !== null && this.solicitadoAvaliado !== undefined) {
    output.writeFieldBegin('solicitadoAvaliado', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.solicitadoAvaliado.length);
    for (var iter7 in this.solicitadoAvaliado)
    {
      if (this.solicitadoAvaliado.hasOwnProperty(iter7))
      {
        iter7 = this.solicitadoAvaliado[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProblemaCondicaoAvaliacaoAIThrift = module.exports.ProblemaCondicaoAvaliacaoAIThrift = function(args) {
  this.ciaps = null;
  this.outroCiap1 = null;
  this.outroCiap2 = null;
  this.cid10 = null;
  this.cid10_2 = null;
  if (args) {
    if (args.ciaps !== undefined) {
      this.ciaps = args.ciaps;
    }
    if (args.outroCiap1 !== undefined) {
      this.outroCiap1 = args.outroCiap1;
    }
    if (args.outroCiap2 !== undefined) {
      this.outroCiap2 = args.outroCiap2;
    }
    if (args.cid10 !== undefined) {
      this.cid10 = args.cid10;
    }
    if (args.cid10_2 !== undefined) {
      this.cid10_2 = args.cid10_2;
    }
  }
};
ProblemaCondicaoAvaliacaoAIThrift.prototype = {};
ProblemaCondicaoAvaliacaoAIThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.ciaps = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.ciaps.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.outroCiap1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.outroCiap2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cid10 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cid10_2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProblemaCondicaoAvaliacaoAIThrift.prototype.write = function(output) {
  output.writeStructBegin('ProblemaCondicaoAvaliacaoAIThrift');
  if (this.ciaps !== null && this.ciaps !== undefined) {
    output.writeFieldBegin('ciaps', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ciaps.length);
    for (var iter15 in this.ciaps)
    {
      if (this.ciaps.hasOwnProperty(iter15))
      {
        iter15 = this.ciaps[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outroCiap1 !== null && this.outroCiap1 !== undefined) {
    output.writeFieldBegin('outroCiap1', Thrift.Type.STRING, 2);
    output.writeString(this.outroCiap1);
    output.writeFieldEnd();
  }
  if (this.outroCiap2 !== null && this.outroCiap2 !== undefined) {
    output.writeFieldBegin('outroCiap2', Thrift.Type.STRING, 3);
    output.writeString(this.outroCiap2);
    output.writeFieldEnd();
  }
  if (this.cid10 !== null && this.cid10 !== undefined) {
    output.writeFieldBegin('cid10', Thrift.Type.STRING, 4);
    output.writeString(this.cid10);
    output.writeFieldEnd();
  }
  if (this.cid10_2 !== null && this.cid10_2 !== undefined) {
    output.writeFieldBegin('cid10_2', Thrift.Type.STRING, 5);
    output.writeString(this.cid10_2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FichaAtendimentoIndividualChildThrift = module.exports.FichaAtendimentoIndividualChildThrift = function(args) {
  this.numeroProntuario = null;
  this.cns = null;
  this.dataNascimento = null;
  this.localDeAtendimento = null;
  this.sexo = null;
  this.turno = null;
  this.tipoAtendimento = null;
  this.pesoAcompanhamentoNutricional = null;
  this.alturaAcompanhamentoNutricional = null;
  this.aleitamentoMaterno = null;
  this.dumDaGestante = null;
  this.idadeGestacional = null;
  this.atencaoDomiciliarModalidade = null;
  this.problemaCondicaoAvaliada = null;
  this.exame = null;
  this.vacinaEmDia = null;
  this.pic = null;
  this.ficouEmObservacao = null;
  this.nasfs = null;
  this.condutas = null;
  this.stGravidezPlanejada = null;
  this.nuGestasPrevias = null;
  this.nuPartos = null;
  this.racionalidadeSaude = null;
  this.perimetroCefalico = null;
  this.dataHoraInicialAtendimento = null;
  this.dataHoraFinalAtendimento = null;
  this.cpfCidadao = null;
  if (args) {
    if (args.numeroProntuario !== undefined) {
      this.numeroProntuario = args.numeroProntuario;
    }
    if (args.cns !== undefined) {
      this.cns = args.cns;
    }
    if (args.dataNascimento !== undefined) {
      this.dataNascimento = args.dataNascimento;
    }
    if (args.localDeAtendimento !== undefined) {
      this.localDeAtendimento = args.localDeAtendimento;
    }
    if (args.sexo !== undefined) {
      this.sexo = args.sexo;
    }
    if (args.turno !== undefined) {
      this.turno = args.turno;
    }
    if (args.tipoAtendimento !== undefined) {
      this.tipoAtendimento = args.tipoAtendimento;
    }
    if (args.pesoAcompanhamentoNutricional !== undefined) {
      this.pesoAcompanhamentoNutricional = args.pesoAcompanhamentoNutricional;
    }
    if (args.alturaAcompanhamentoNutricional !== undefined) {
      this.alturaAcompanhamentoNutricional = args.alturaAcompanhamentoNutricional;
    }
    if (args.aleitamentoMaterno !== undefined) {
      this.aleitamentoMaterno = args.aleitamentoMaterno;
    }
    if (args.dumDaGestante !== undefined) {
      this.dumDaGestante = args.dumDaGestante;
    }
    if (args.idadeGestacional !== undefined) {
      this.idadeGestacional = args.idadeGestacional;
    }
    if (args.atencaoDomiciliarModalidade !== undefined) {
      this.atencaoDomiciliarModalidade = args.atencaoDomiciliarModalidade;
    }
    if (args.problemaCondicaoAvaliada !== undefined) {
      this.problemaCondicaoAvaliada = args.problemaCondicaoAvaliada;
    }
    if (args.exame !== undefined) {
      this.exame = args.exame;
    }
    if (args.vacinaEmDia !== undefined) {
      this.vacinaEmDia = args.vacinaEmDia;
    }
    if (args.pic !== undefined) {
      this.pic = args.pic;
    }
    if (args.ficouEmObservacao !== undefined) {
      this.ficouEmObservacao = args.ficouEmObservacao;
    }
    if (args.nasfs !== undefined) {
      this.nasfs = args.nasfs;
    }
    if (args.condutas !== undefined) {
      this.condutas = args.condutas;
    }
    if (args.stGravidezPlanejada !== undefined) {
      this.stGravidezPlanejada = args.stGravidezPlanejada;
    }
    if (args.nuGestasPrevias !== undefined) {
      this.nuGestasPrevias = args.nuGestasPrevias;
    }
    if (args.nuPartos !== undefined) {
      this.nuPartos = args.nuPartos;
    }
    if (args.racionalidadeSaude !== undefined) {
      this.racionalidadeSaude = args.racionalidadeSaude;
    }
    if (args.perimetroCefalico !== undefined) {
      this.perimetroCefalico = args.perimetroCefalico;
    }
    if (args.dataHoraInicialAtendimento !== undefined) {
      this.dataHoraInicialAtendimento = args.dataHoraInicialAtendimento;
    }
    if (args.dataHoraFinalAtendimento !== undefined) {
      this.dataHoraFinalAtendimento = args.dataHoraFinalAtendimento;
    }
    if (args.cpfCidadao !== undefined) {
      this.cpfCidadao = args.cpfCidadao;
    }
  }
};
FichaAtendimentoIndividualChildThrift.prototype = {};
FichaAtendimentoIndividualChildThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.numeroProntuario = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dataNascimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.localDeAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.sexo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.turno = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.tipoAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pesoAcompanhamentoNutricional = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.alturaAcompanhamentoNutricional = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.aleitamentoMaterno = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dumDaGestante = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.idadeGestacional = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.atencaoDomiciliarModalidade = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.problemaCondicaoAvaliada = new ttypes.ProblemaCondicaoAvaliacaoAIThrift();
        this.problemaCondicaoAvaliada.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.exame = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ExameThrift();
          elem22.read(input);
          this.exame.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.vacinaEmDia = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.pic = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.ficouEmObservacao = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.nasfs = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readI64();
          this.nasfs.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.condutas = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = input.readI64();
          this.condutas.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.stGravidezPlanejada = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.nuGestasPrevias = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.nuPartos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I64) {
        this.racionalidadeSaude = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.DOUBLE) {
        this.perimetroCefalico = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.dataHoraInicialAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.I64) {
        this.dataHoraFinalAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.cpfCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaAtendimentoIndividualChildThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaAtendimentoIndividualChildThrift');
  if (this.numeroProntuario !== null && this.numeroProntuario !== undefined) {
    output.writeFieldBegin('numeroProntuario', Thrift.Type.STRING, 1);
    output.writeString(this.numeroProntuario);
    output.writeFieldEnd();
  }
  if (this.cns !== null && this.cns !== undefined) {
    output.writeFieldBegin('cns', Thrift.Type.STRING, 2);
    output.writeString(this.cns);
    output.writeFieldEnd();
  }
  if (this.dataNascimento !== null && this.dataNascimento !== undefined) {
    output.writeFieldBegin('dataNascimento', Thrift.Type.I64, 3);
    output.writeI64(this.dataNascimento);
    output.writeFieldEnd();
  }
  if (this.localDeAtendimento !== null && this.localDeAtendimento !== undefined) {
    output.writeFieldBegin('localDeAtendimento', Thrift.Type.I64, 4);
    output.writeI64(this.localDeAtendimento);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.I64, 5);
    output.writeI64(this.sexo);
    output.writeFieldEnd();
  }
  if (this.turno !== null && this.turno !== undefined) {
    output.writeFieldBegin('turno', Thrift.Type.I64, 6);
    output.writeI64(this.turno);
    output.writeFieldEnd();
  }
  if (this.tipoAtendimento !== null && this.tipoAtendimento !== undefined) {
    output.writeFieldBegin('tipoAtendimento', Thrift.Type.I64, 7);
    output.writeI64(this.tipoAtendimento);
    output.writeFieldEnd();
  }
  if (this.pesoAcompanhamentoNutricional !== null && this.pesoAcompanhamentoNutricional !== undefined) {
    output.writeFieldBegin('pesoAcompanhamentoNutricional', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.pesoAcompanhamentoNutricional);
    output.writeFieldEnd();
  }
  if (this.alturaAcompanhamentoNutricional !== null && this.alturaAcompanhamentoNutricional !== undefined) {
    output.writeFieldBegin('alturaAcompanhamentoNutricional', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.alturaAcompanhamentoNutricional);
    output.writeFieldEnd();
  }
  if (this.aleitamentoMaterno !== null && this.aleitamentoMaterno !== undefined) {
    output.writeFieldBegin('aleitamentoMaterno', Thrift.Type.I64, 10);
    output.writeI64(this.aleitamentoMaterno);
    output.writeFieldEnd();
  }
  if (this.dumDaGestante !== null && this.dumDaGestante !== undefined) {
    output.writeFieldBegin('dumDaGestante', Thrift.Type.I64, 11);
    output.writeI64(this.dumDaGestante);
    output.writeFieldEnd();
  }
  if (this.idadeGestacional !== null && this.idadeGestacional !== undefined) {
    output.writeFieldBegin('idadeGestacional', Thrift.Type.I32, 12);
    output.writeI32(this.idadeGestacional);
    output.writeFieldEnd();
  }
  if (this.atencaoDomiciliarModalidade !== null && this.atencaoDomiciliarModalidade !== undefined) {
    output.writeFieldBegin('atencaoDomiciliarModalidade', Thrift.Type.I64, 13);
    output.writeI64(this.atencaoDomiciliarModalidade);
    output.writeFieldEnd();
  }
  if (this.problemaCondicaoAvaliada !== null && this.problemaCondicaoAvaliada !== undefined) {
    output.writeFieldBegin('problemaCondicaoAvaliada', Thrift.Type.STRUCT, 14);
    this.problemaCondicaoAvaliada.write(output);
    output.writeFieldEnd();
  }
  if (this.exame !== null && this.exame !== undefined) {
    output.writeFieldBegin('exame', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRUCT, this.exame.length);
    for (var iter37 in this.exame)
    {
      if (this.exame.hasOwnProperty(iter37))
      {
        iter37 = this.exame[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vacinaEmDia !== null && this.vacinaEmDia !== undefined) {
    output.writeFieldBegin('vacinaEmDia', Thrift.Type.BOOL, 18);
    output.writeBool(this.vacinaEmDia);
    output.writeFieldEnd();
  }
  if (this.pic !== null && this.pic !== undefined) {
    output.writeFieldBegin('pic', Thrift.Type.I64, 19);
    output.writeI64(this.pic);
    output.writeFieldEnd();
  }
  if (this.ficouEmObservacao !== null && this.ficouEmObservacao !== undefined) {
    output.writeFieldBegin('ficouEmObservacao', Thrift.Type.BOOL, 20);
    output.writeBool(this.ficouEmObservacao);
    output.writeFieldEnd();
  }
  if (this.nasfs !== null && this.nasfs !== undefined) {
    output.writeFieldBegin('nasfs', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.I64, this.nasfs.length);
    for (var iter38 in this.nasfs)
    {
      if (this.nasfs.hasOwnProperty(iter38))
      {
        iter38 = this.nasfs[iter38];
        output.writeI64(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condutas !== null && this.condutas !== undefined) {
    output.writeFieldBegin('condutas', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.I64, this.condutas.length);
    for (var iter39 in this.condutas)
    {
      if (this.condutas.hasOwnProperty(iter39))
      {
        iter39 = this.condutas[iter39];
        output.writeI64(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stGravidezPlanejada !== null && this.stGravidezPlanejada !== undefined) {
    output.writeFieldBegin('stGravidezPlanejada', Thrift.Type.BOOL, 23);
    output.writeBool(this.stGravidezPlanejada);
    output.writeFieldEnd();
  }
  if (this.nuGestasPrevias !== null && this.nuGestasPrevias !== undefined) {
    output.writeFieldBegin('nuGestasPrevias', Thrift.Type.I32, 24);
    output.writeI32(this.nuGestasPrevias);
    output.writeFieldEnd();
  }
  if (this.nuPartos !== null && this.nuPartos !== undefined) {
    output.writeFieldBegin('nuPartos', Thrift.Type.I32, 25);
    output.writeI32(this.nuPartos);
    output.writeFieldEnd();
  }
  if (this.racionalidadeSaude !== null && this.racionalidadeSaude !== undefined) {
    output.writeFieldBegin('racionalidadeSaude', Thrift.Type.I64, 26);
    output.writeI64(this.racionalidadeSaude);
    output.writeFieldEnd();
  }
  if (this.perimetroCefalico !== null && this.perimetroCefalico !== undefined) {
    output.writeFieldBegin('perimetroCefalico', Thrift.Type.DOUBLE, 27);
    output.writeDouble(this.perimetroCefalico);
    output.writeFieldEnd();
  }
  if (this.dataHoraInicialAtendimento !== null && this.dataHoraInicialAtendimento !== undefined) {
    output.writeFieldBegin('dataHoraInicialAtendimento', Thrift.Type.I64, 28);
    output.writeI64(this.dataHoraInicialAtendimento);
    output.writeFieldEnd();
  }
  if (this.dataHoraFinalAtendimento !== null && this.dataHoraFinalAtendimento !== undefined) {
    output.writeFieldBegin('dataHoraFinalAtendimento', Thrift.Type.I64, 29);
    output.writeI64(this.dataHoraFinalAtendimento);
    output.writeFieldEnd();
  }
  if (this.cpfCidadao !== null && this.cpfCidadao !== undefined) {
    output.writeFieldBegin('cpfCidadao', Thrift.Type.STRING, 30);
    output.writeString(this.cpfCidadao);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FichaAtendimentoIndividualMasterThrift = module.exports.FichaAtendimentoIndividualMasterThrift = function(args) {
  this.headerTransport = null;
  this.atendimentosIndividuais = null;
  this.uuidFicha = null;
  this.tpCdsOrigem = null;
  if (args) {
    if (args.headerTransport !== undefined) {
      this.headerTransport = args.headerTransport;
    }
    if (args.atendimentosIndividuais !== undefined) {
      this.atendimentosIndividuais = args.atendimentosIndividuais;
    }
    if (args.uuidFicha !== undefined) {
      this.uuidFicha = args.uuidFicha;
    }
    if (args.tpCdsOrigem !== undefined) {
      this.tpCdsOrigem = args.tpCdsOrigem;
    }
  }
};
FichaAtendimentoIndividualMasterThrift.prototype = {};
FichaAtendimentoIndividualMasterThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.headerTransport = new common_ttypes.VariasLotacoesHeaderThrift();
        this.headerTransport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.atendimentosIndividuais = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.FichaAtendimentoIndividualChildThrift();
          elem46.read(input);
          this.atendimentosIndividuais.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uuidFicha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.tpCdsOrigem = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaAtendimentoIndividualMasterThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaAtendimentoIndividualMasterThrift');
  if (this.headerTransport !== null && this.headerTransport !== undefined) {
    output.writeFieldBegin('headerTransport', Thrift.Type.STRUCT, 1);
    this.headerTransport.write(output);
    output.writeFieldEnd();
  }
  if (this.atendimentosIndividuais !== null && this.atendimentosIndividuais !== undefined) {
    output.writeFieldBegin('atendimentosIndividuais', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.atendimentosIndividuais.length);
    for (var iter47 in this.atendimentosIndividuais)
    {
      if (this.atendimentosIndividuais.hasOwnProperty(iter47))
      {
        iter47 = this.atendimentosIndividuais[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.uuidFicha !== null && this.uuidFicha !== undefined) {
    output.writeFieldBegin('uuidFicha', Thrift.Type.STRING, 3);
    output.writeString(this.uuidFicha);
    output.writeFieldEnd();
  }
  if (this.tpCdsOrigem !== null && this.tpCdsOrigem !== undefined) {
    output.writeFieldBegin('tpCdsOrigem', Thrift.Type.I32, 4);
    output.writeI32(this.tpCdsOrigem);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

