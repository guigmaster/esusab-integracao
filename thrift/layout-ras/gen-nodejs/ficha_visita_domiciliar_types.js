//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
FichaVisitaDomiciliarChildThrift = module.exports.FichaVisitaDomiciliarChildThrift = function(args) {
  this.turno = null;
  this.numProntuario = null;
  this.cnsCidadao = null;
  this.dtNascimento = null;
  this.sexo = null;
  this.statusVisitaCompartilhadaOutroProfissional = null;
  this.motivosVisita = null;
  this.desfecho = null;
  this.microArea = null;
  this.stForaArea = null;
  this.tipoDeImovel = null;
  this.pesoAcompanhamentoNutricional = null;
  this.alturaAcompanhamentoNutricional = null;
  this.cpfCidadao = null;
  if (args) {
    if (args.turno !== undefined) {
      this.turno = args.turno;
    }
    if (args.numProntuario !== undefined) {
      this.numProntuario = args.numProntuario;
    }
    if (args.cnsCidadao !== undefined) {
      this.cnsCidadao = args.cnsCidadao;
    }
    if (args.dtNascimento !== undefined) {
      this.dtNascimento = args.dtNascimento;
    }
    if (args.sexo !== undefined) {
      this.sexo = args.sexo;
    }
    if (args.statusVisitaCompartilhadaOutroProfissional !== undefined) {
      this.statusVisitaCompartilhadaOutroProfissional = args.statusVisitaCompartilhadaOutroProfissional;
    }
    if (args.motivosVisita !== undefined) {
      this.motivosVisita = args.motivosVisita;
    }
    if (args.desfecho !== undefined) {
      this.desfecho = args.desfecho;
    }
    if (args.microArea !== undefined) {
      this.microArea = args.microArea;
    }
    if (args.stForaArea !== undefined) {
      this.stForaArea = args.stForaArea;
    }
    if (args.tipoDeImovel !== undefined) {
      this.tipoDeImovel = args.tipoDeImovel;
    }
    if (args.pesoAcompanhamentoNutricional !== undefined) {
      this.pesoAcompanhamentoNutricional = args.pesoAcompanhamentoNutricional;
    }
    if (args.alturaAcompanhamentoNutricional !== undefined) {
      this.alturaAcompanhamentoNutricional = args.alturaAcompanhamentoNutricional;
    }
    if (args.cpfCidadao !== undefined) {
      this.cpfCidadao = args.cpfCidadao;
    }
  }
};
FichaVisitaDomiciliarChildThrift.prototype = {};
FichaVisitaDomiciliarChildThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.turno = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.numProntuario = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cnsCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.dtNascimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.sexo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.statusVisitaCompartilhadaOutroProfissional = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.motivosVisita = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64();
          this.motivosVisita.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.desfecho = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.microArea = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.stForaArea = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.tipoDeImovel = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pesoAcompanhamentoNutricional = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.alturaAcompanhamentoNutricional = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.cpfCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaVisitaDomiciliarChildThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaVisitaDomiciliarChildThrift');
  if (this.turno !== null && this.turno !== undefined) {
    output.writeFieldBegin('turno', Thrift.Type.I64, 1);
    output.writeI64(this.turno);
    output.writeFieldEnd();
  }
  if (this.numProntuario !== null && this.numProntuario !== undefined) {
    output.writeFieldBegin('numProntuario', Thrift.Type.STRING, 2);
    output.writeString(this.numProntuario);
    output.writeFieldEnd();
  }
  if (this.cnsCidadao !== null && this.cnsCidadao !== undefined) {
    output.writeFieldBegin('cnsCidadao', Thrift.Type.STRING, 3);
    output.writeString(this.cnsCidadao);
    output.writeFieldEnd();
  }
  if (this.dtNascimento !== null && this.dtNascimento !== undefined) {
    output.writeFieldBegin('dtNascimento', Thrift.Type.I64, 4);
    output.writeI64(this.dtNascimento);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.I64, 5);
    output.writeI64(this.sexo);
    output.writeFieldEnd();
  }
  if (this.statusVisitaCompartilhadaOutroProfissional !== null && this.statusVisitaCompartilhadaOutroProfissional !== undefined) {
    output.writeFieldBegin('statusVisitaCompartilhadaOutroProfissional', Thrift.Type.BOOL, 6);
    output.writeBool(this.statusVisitaCompartilhadaOutroProfissional);
    output.writeFieldEnd();
  }
  if (this.motivosVisita !== null && this.motivosVisita !== undefined) {
    output.writeFieldBegin('motivosVisita', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I64, this.motivosVisita.length);
    for (var iter7 in this.motivosVisita)
    {
      if (this.motivosVisita.hasOwnProperty(iter7))
      {
        iter7 = this.motivosVisita[iter7];
        output.writeI64(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.desfecho !== null && this.desfecho !== undefined) {
    output.writeFieldBegin('desfecho', Thrift.Type.I64, 8);
    output.writeI64(this.desfecho);
    output.writeFieldEnd();
  }
  if (this.microArea !== null && this.microArea !== undefined) {
    output.writeFieldBegin('microArea', Thrift.Type.STRING, 9);
    output.writeString(this.microArea);
    output.writeFieldEnd();
  }
  if (this.stForaArea !== null && this.stForaArea !== undefined) {
    output.writeFieldBegin('stForaArea', Thrift.Type.BOOL, 10);
    output.writeBool(this.stForaArea);
    output.writeFieldEnd();
  }
  if (this.tipoDeImovel !== null && this.tipoDeImovel !== undefined) {
    output.writeFieldBegin('tipoDeImovel', Thrift.Type.I64, 11);
    output.writeI64(this.tipoDeImovel);
    output.writeFieldEnd();
  }
  if (this.pesoAcompanhamentoNutricional !== null && this.pesoAcompanhamentoNutricional !== undefined) {
    output.writeFieldBegin('pesoAcompanhamentoNutricional', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.pesoAcompanhamentoNutricional);
    output.writeFieldEnd();
  }
  if (this.alturaAcompanhamentoNutricional !== null && this.alturaAcompanhamentoNutricional !== undefined) {
    output.writeFieldBegin('alturaAcompanhamentoNutricional', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.alturaAcompanhamentoNutricional);
    output.writeFieldEnd();
  }
  if (this.cpfCidadao !== null && this.cpfCidadao !== undefined) {
    output.writeFieldBegin('cpfCidadao', Thrift.Type.STRING, 14);
    output.writeString(this.cpfCidadao);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FichaVisitaDomiciliarMasterThrift = module.exports.FichaVisitaDomiciliarMasterThrift = function(args) {
  this.uuidFicha = null;
  this.tpCdsOrigem = null;
  this.headerTransport = null;
  this.visitasDomiciliares = null;
  if (args) {
    if (args.uuidFicha !== undefined) {
      this.uuidFicha = args.uuidFicha;
    }
    if (args.tpCdsOrigem !== undefined) {
      this.tpCdsOrigem = args.tpCdsOrigem;
    }
    if (args.headerTransport !== undefined) {
      this.headerTransport = args.headerTransport;
    }
    if (args.visitasDomiciliares !== undefined) {
      this.visitasDomiciliares = args.visitasDomiciliares;
    }
  }
};
FichaVisitaDomiciliarMasterThrift.prototype = {};
FichaVisitaDomiciliarMasterThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuidFicha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.tpCdsOrigem = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.headerTransport = new common_ttypes.UnicaLotacaoHeaderThrift();
        this.headerTransport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.visitasDomiciliares = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.FichaVisitaDomiciliarChildThrift();
          elem14.read(input);
          this.visitasDomiciliares.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaVisitaDomiciliarMasterThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaVisitaDomiciliarMasterThrift');
  if (this.uuidFicha !== null && this.uuidFicha !== undefined) {
    output.writeFieldBegin('uuidFicha', Thrift.Type.STRING, 1);
    output.writeString(this.uuidFicha);
    output.writeFieldEnd();
  }
  if (this.tpCdsOrigem !== null && this.tpCdsOrigem !== undefined) {
    output.writeFieldBegin('tpCdsOrigem', Thrift.Type.I32, 2);
    output.writeI32(this.tpCdsOrigem);
    output.writeFieldEnd();
  }
  if (this.headerTransport !== null && this.headerTransport !== undefined) {
    output.writeFieldBegin('headerTransport', Thrift.Type.STRUCT, 3);
    this.headerTransport.write(output);
    output.writeFieldEnd();
  }
  if (this.visitasDomiciliares !== null && this.visitasDomiciliares !== undefined) {
    output.writeFieldBegin('visitasDomiciliares', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.visitasDomiciliares.length);
    for (var iter15 in this.visitasDomiciliares)
    {
      if (this.visitasDomiciliares.hasOwnProperty(iter15))
      {
        iter15 = this.visitasDomiciliares[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

