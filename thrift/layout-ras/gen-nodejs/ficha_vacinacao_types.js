//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
VacinaRowThrift = module.exports.VacinaRowThrift = function(args) {
  this.imunobiologico = null;
  this.estrategiaVacinacao = null;
  this.dose = null;
  this.lote = null;
  this.fabricante = null;
  if (args) {
    if (args.imunobiologico !== undefined) {
      this.imunobiologico = args.imunobiologico;
    }
    if (args.estrategiaVacinacao !== undefined) {
      this.estrategiaVacinacao = args.estrategiaVacinacao;
    }
    if (args.dose !== undefined) {
      this.dose = args.dose;
    }
    if (args.lote !== undefined) {
      this.lote = args.lote;
    }
    if (args.fabricante !== undefined) {
      this.fabricante = args.fabricante;
    }
  }
};
VacinaRowThrift.prototype = {};
VacinaRowThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.imunobiologico = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.estrategiaVacinacao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dose = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lote = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fabricante = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VacinaRowThrift.prototype.write = function(output) {
  output.writeStructBegin('VacinaRowThrift');
  if (this.imunobiologico !== null && this.imunobiologico !== undefined) {
    output.writeFieldBegin('imunobiologico', Thrift.Type.I64, 1);
    output.writeI64(this.imunobiologico);
    output.writeFieldEnd();
  }
  if (this.estrategiaVacinacao !== null && this.estrategiaVacinacao !== undefined) {
    output.writeFieldBegin('estrategiaVacinacao', Thrift.Type.I64, 2);
    output.writeI64(this.estrategiaVacinacao);
    output.writeFieldEnd();
  }
  if (this.dose !== null && this.dose !== undefined) {
    output.writeFieldBegin('dose', Thrift.Type.I64, 3);
    output.writeI64(this.dose);
    output.writeFieldEnd();
  }
  if (this.lote !== null && this.lote !== undefined) {
    output.writeFieldBegin('lote', Thrift.Type.STRING, 4);
    output.writeString(this.lote);
    output.writeFieldEnd();
  }
  if (this.fabricante !== null && this.fabricante !== undefined) {
    output.writeFieldBegin('fabricante', Thrift.Type.STRING, 5);
    output.writeString(this.fabricante);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FichaVacinacaoChildThrift = module.exports.FichaVacinacaoChildThrift = function(args) {
  this.turno = null;
  this.numProntuario = null;
  this.cnsCidadao = null;
  this.dtNascimento = null;
  this.sexo = null;
  this.localAtendimento = null;
  this.viajante = null;
  this.comunicanteHanseniase = null;
  this.gestante = null;
  this.puerpera = null;
  this.vacinas = null;
  this.dataHoraInicialAtendimento = null;
  this.dataHoraFinalAtendimento = null;
  this.cpfCidadao = null;
  if (args) {
    if (args.turno !== undefined) {
      this.turno = args.turno;
    }
    if (args.numProntuario !== undefined) {
      this.numProntuario = args.numProntuario;
    }
    if (args.cnsCidadao !== undefined) {
      this.cnsCidadao = args.cnsCidadao;
    }
    if (args.dtNascimento !== undefined) {
      this.dtNascimento = args.dtNascimento;
    }
    if (args.sexo !== undefined) {
      this.sexo = args.sexo;
    }
    if (args.localAtendimento !== undefined) {
      this.localAtendimento = args.localAtendimento;
    }
    if (args.viajante !== undefined) {
      this.viajante = args.viajante;
    }
    if (args.comunicanteHanseniase !== undefined) {
      this.comunicanteHanseniase = args.comunicanteHanseniase;
    }
    if (args.gestante !== undefined) {
      this.gestante = args.gestante;
    }
    if (args.puerpera !== undefined) {
      this.puerpera = args.puerpera;
    }
    if (args.vacinas !== undefined) {
      this.vacinas = args.vacinas;
    }
    if (args.dataHoraInicialAtendimento !== undefined) {
      this.dataHoraInicialAtendimento = args.dataHoraInicialAtendimento;
    }
    if (args.dataHoraFinalAtendimento !== undefined) {
      this.dataHoraFinalAtendimento = args.dataHoraFinalAtendimento;
    }
    if (args.cpfCidadao !== undefined) {
      this.cpfCidadao = args.cpfCidadao;
    }
  }
};
FichaVacinacaoChildThrift.prototype = {};
FichaVacinacaoChildThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.turno = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.numProntuario = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cnsCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.dtNascimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.sexo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.localAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.viajante = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.comunicanteHanseniase = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.gestante = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.puerpera = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.vacinas = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.VacinaRowThrift();
          elem6.read(input);
          this.vacinas.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.dataHoraInicialAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.dataHoraFinalAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.cpfCidadao = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaVacinacaoChildThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaVacinacaoChildThrift');
  if (this.turno !== null && this.turno !== undefined) {
    output.writeFieldBegin('turno', Thrift.Type.I64, 1);
    output.writeI64(this.turno);
    output.writeFieldEnd();
  }
  if (this.numProntuario !== null && this.numProntuario !== undefined) {
    output.writeFieldBegin('numProntuario', Thrift.Type.STRING, 2);
    output.writeString(this.numProntuario);
    output.writeFieldEnd();
  }
  if (this.cnsCidadao !== null && this.cnsCidadao !== undefined) {
    output.writeFieldBegin('cnsCidadao', Thrift.Type.STRING, 3);
    output.writeString(this.cnsCidadao);
    output.writeFieldEnd();
  }
  if (this.dtNascimento !== null && this.dtNascimento !== undefined) {
    output.writeFieldBegin('dtNascimento', Thrift.Type.I64, 4);
    output.writeI64(this.dtNascimento);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.I64, 5);
    output.writeI64(this.sexo);
    output.writeFieldEnd();
  }
  if (this.localAtendimento !== null && this.localAtendimento !== undefined) {
    output.writeFieldBegin('localAtendimento', Thrift.Type.I64, 6);
    output.writeI64(this.localAtendimento);
    output.writeFieldEnd();
  }
  if (this.viajante !== null && this.viajante !== undefined) {
    output.writeFieldBegin('viajante', Thrift.Type.BOOL, 7);
    output.writeBool(this.viajante);
    output.writeFieldEnd();
  }
  if (this.comunicanteHanseniase !== null && this.comunicanteHanseniase !== undefined) {
    output.writeFieldBegin('comunicanteHanseniase', Thrift.Type.BOOL, 8);
    output.writeBool(this.comunicanteHanseniase);
    output.writeFieldEnd();
  }
  if (this.gestante !== null && this.gestante !== undefined) {
    output.writeFieldBegin('gestante', Thrift.Type.BOOL, 9);
    output.writeBool(this.gestante);
    output.writeFieldEnd();
  }
  if (this.puerpera !== null && this.puerpera !== undefined) {
    output.writeFieldBegin('puerpera', Thrift.Type.BOOL, 10);
    output.writeBool(this.puerpera);
    output.writeFieldEnd();
  }
  if (this.vacinas !== null && this.vacinas !== undefined) {
    output.writeFieldBegin('vacinas', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.vacinas.length);
    for (var iter7 in this.vacinas)
    {
      if (this.vacinas.hasOwnProperty(iter7))
      {
        iter7 = this.vacinas[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dataHoraInicialAtendimento !== null && this.dataHoraInicialAtendimento !== undefined) {
    output.writeFieldBegin('dataHoraInicialAtendimento', Thrift.Type.I64, 12);
    output.writeI64(this.dataHoraInicialAtendimento);
    output.writeFieldEnd();
  }
  if (this.dataHoraFinalAtendimento !== null && this.dataHoraFinalAtendimento !== undefined) {
    output.writeFieldBegin('dataHoraFinalAtendimento', Thrift.Type.I64, 13);
    output.writeI64(this.dataHoraFinalAtendimento);
    output.writeFieldEnd();
  }
  if (this.cpfCidadao !== null && this.cpfCidadao !== undefined) {
    output.writeFieldBegin('cpfCidadao', Thrift.Type.STRING, 14);
    output.writeString(this.cpfCidadao);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FichaVacinacaoMasterThrift = module.exports.FichaVacinacaoMasterThrift = function(args) {
  this.uuidFicha = null;
  this.tpCdsOrigem = null;
  this.headerTransport = null;
  this.vacinacoes = null;
  if (args) {
    if (args.uuidFicha !== undefined) {
      this.uuidFicha = args.uuidFicha;
    }
    if (args.tpCdsOrigem !== undefined) {
      this.tpCdsOrigem = args.tpCdsOrigem;
    }
    if (args.headerTransport !== undefined) {
      this.headerTransport = args.headerTransport;
    }
    if (args.vacinacoes !== undefined) {
      this.vacinacoes = args.vacinacoes;
    }
  }
};
FichaVacinacaoMasterThrift.prototype = {};
FichaVacinacaoMasterThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuidFicha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.tpCdsOrigem = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.headerTransport = new common_ttypes.UnicaLotacaoHeaderThrift();
        this.headerTransport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.vacinacoes = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.FichaVacinacaoChildThrift();
          elem14.read(input);
          this.vacinacoes.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FichaVacinacaoMasterThrift.prototype.write = function(output) {
  output.writeStructBegin('FichaVacinacaoMasterThrift');
  if (this.uuidFicha !== null && this.uuidFicha !== undefined) {
    output.writeFieldBegin('uuidFicha', Thrift.Type.STRING, 1);
    output.writeString(this.uuidFicha);
    output.writeFieldEnd();
  }
  if (this.tpCdsOrigem !== null && this.tpCdsOrigem !== undefined) {
    output.writeFieldBegin('tpCdsOrigem', Thrift.Type.I32, 2);
    output.writeI32(this.tpCdsOrigem);
    output.writeFieldEnd();
  }
  if (this.headerTransport !== null && this.headerTransport !== undefined) {
    output.writeFieldBegin('headerTransport', Thrift.Type.STRUCT, 3);
    this.headerTransport.write(output);
    output.writeFieldEnd();
  }
  if (this.vacinacoes !== null && this.vacinacoes !== undefined) {
    output.writeFieldBegin('vacinacoes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.vacinacoes.length);
    for (var iter15 in this.vacinacoes)
    {
      if (this.vacinacoes.hasOwnProperty(iter15))
      {
        iter15 = this.vacinacoes[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

